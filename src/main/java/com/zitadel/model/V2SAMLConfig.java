/*
 * Zitadel SDK
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zitadel.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.zitadel.model.V2SAMLBinding;
import com.zitadel.model.V2SAMLNameIDFormat;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * V2SAMLConfig
 */
@JsonPropertyOrder({
  V2SAMLConfig.JSON_PROPERTY_METADATA_XML,
  V2SAMLConfig.JSON_PROPERTY_BINDING,
  V2SAMLConfig.JSON_PROPERTY_WITH_SIGNED_REQUEST,
  V2SAMLConfig.JSON_PROPERTY_NAME_ID_FORMAT,
  V2SAMLConfig.JSON_PROPERTY_TRANSIENT_MAPPING_ATTRIBUTE_NAME
})
@JsonTypeName("v2SAMLConfig")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class V2SAMLConfig {
  public static final String JSON_PROPERTY_METADATA_XML = "metadataXml";
  @javax.annotation.Nullable
  private byte[] metadataXml;

  public static final String JSON_PROPERTY_BINDING = "binding";
  @javax.annotation.Nullable
  private V2SAMLBinding binding = V2SAMLBinding.SAML_BINDING_UNSPECIFIED;

  public static final String JSON_PROPERTY_WITH_SIGNED_REQUEST = "withSignedRequest";
  @javax.annotation.Nullable
  private Boolean withSignedRequest;

  public static final String JSON_PROPERTY_NAME_ID_FORMAT = "nameIdFormat";
  @javax.annotation.Nullable
  private V2SAMLNameIDFormat nameIdFormat = V2SAMLNameIDFormat.SAML_NAME_ID_FORMAT_UNSPECIFIED;

  public static final String JSON_PROPERTY_TRANSIENT_MAPPING_ATTRIBUTE_NAME = "transientMappingAttributeName";
  @javax.annotation.Nullable
  private String transientMappingAttributeName;

  public V2SAMLConfig() {
  }

  public V2SAMLConfig metadataXml(@javax.annotation.Nullable byte[] metadataXml) {
    
    this.metadataXml = metadataXml;
    return this;
  }

  /**
   * Metadata of the SAML identity provider.
   * @return metadataXml
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA_XML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public byte[] getMetadataXml() {
    return metadataXml;
  }


  @JsonProperty(JSON_PROPERTY_METADATA_XML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadataXml(@javax.annotation.Nullable byte[] metadataXml) {
    this.metadataXml = metadataXml;
  }

  public V2SAMLConfig binding(@javax.annotation.Nullable V2SAMLBinding binding) {
    
    this.binding = binding;
    return this;
  }

  /**
   * Get binding
   * @return binding
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BINDING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public V2SAMLBinding getBinding() {
    return binding;
  }


  @JsonProperty(JSON_PROPERTY_BINDING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBinding(@javax.annotation.Nullable V2SAMLBinding binding) {
    this.binding = binding;
  }

  public V2SAMLConfig withSignedRequest(@javax.annotation.Nullable Boolean withSignedRequest) {
    
    this.withSignedRequest = withSignedRequest;
    return this;
  }

  /**
   * Boolean which defines if the authentication requests are signed.
   * @return withSignedRequest
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WITH_SIGNED_REQUEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getWithSignedRequest() {
    return withSignedRequest;
  }


  @JsonProperty(JSON_PROPERTY_WITH_SIGNED_REQUEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWithSignedRequest(@javax.annotation.Nullable Boolean withSignedRequest) {
    this.withSignedRequest = withSignedRequest;
  }

  public V2SAMLConfig nameIdFormat(@javax.annotation.Nullable V2SAMLNameIDFormat nameIdFormat) {
    
    this.nameIdFormat = nameIdFormat;
    return this;
  }

  /**
   * Get nameIdFormat
   * @return nameIdFormat
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME_ID_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public V2SAMLNameIDFormat getNameIdFormat() {
    return nameIdFormat;
  }


  @JsonProperty(JSON_PROPERTY_NAME_ID_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNameIdFormat(@javax.annotation.Nullable V2SAMLNameIDFormat nameIdFormat) {
    this.nameIdFormat = nameIdFormat;
  }

  public V2SAMLConfig transientMappingAttributeName(@javax.annotation.Nullable String transientMappingAttributeName) {
    
    this.transientMappingAttributeName = transientMappingAttributeName;
    return this;
  }

  /**
   * Optional name of the attribute, which will be used to map the user in case the nameid-format returned is &#x60;urn:oasis:names:tc:SAML:2.0:nameid-format:transient&#x60;.
   * @return transientMappingAttributeName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSIENT_MAPPING_ATTRIBUTE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTransientMappingAttributeName() {
    return transientMappingAttributeName;
  }


  @JsonProperty(JSON_PROPERTY_TRANSIENT_MAPPING_ATTRIBUTE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransientMappingAttributeName(@javax.annotation.Nullable String transientMappingAttributeName) {
    this.transientMappingAttributeName = transientMappingAttributeName;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V2SAMLConfig v2SAMLConfig = (V2SAMLConfig) o;
    return Arrays.equals(this.metadataXml, v2SAMLConfig.metadataXml) &&
        Objects.equals(this.binding, v2SAMLConfig.binding) &&
        Objects.equals(this.withSignedRequest, v2SAMLConfig.withSignedRequest) &&
        Objects.equals(this.nameIdFormat, v2SAMLConfig.nameIdFormat) &&
        Objects.equals(this.transientMappingAttributeName, v2SAMLConfig.transientMappingAttributeName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(metadataXml), binding, withSignedRequest, nameIdFormat, transientMappingAttributeName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V2SAMLConfig {\n");
    sb.append("    metadataXml: ").append(toIndentedString(metadataXml)).append("\n");
    sb.append("    binding: ").append(toIndentedString(binding)).append("\n");
    sb.append("    withSignedRequest: ").append(toIndentedString(withSignedRequest)).append("\n");
    sb.append("    nameIdFormat: ").append(toIndentedString(nameIdFormat)).append("\n");
    sb.append("    transientMappingAttributeName: ").append(toIndentedString(transientMappingAttributeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `metadataXml` to the URL query string
    if (getMetadataXml() != null) {
      try {
        joiner.add(String.format("%smetadataXml%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMetadataXml()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `binding` to the URL query string
    if (getBinding() != null) {
      try {
        joiner.add(String.format("%sbinding%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBinding()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `withSignedRequest` to the URL query string
    if (getWithSignedRequest() != null) {
      try {
        joiner.add(String.format("%swithSignedRequest%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWithSignedRequest()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `nameIdFormat` to the URL query string
    if (getNameIdFormat() != null) {
      try {
        joiner.add(String.format("%snameIdFormat%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNameIdFormat()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `transientMappingAttributeName` to the URL query string
    if (getTransientMappingAttributeName() != null) {
      try {
        joiner.add(String.format("%stransientMappingAttributeName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTransientMappingAttributeName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

