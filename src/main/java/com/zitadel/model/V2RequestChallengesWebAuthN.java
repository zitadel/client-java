/*
 * merged spec
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zitadel.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.zitadel.model.V2UserVerificationRequirement;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * V2RequestChallengesWebAuthN
 */
@JsonPropertyOrder({
  V2RequestChallengesWebAuthN.JSON_PROPERTY_DOMAIN,
  V2RequestChallengesWebAuthN.JSON_PROPERTY_USER_VERIFICATION_REQUIREMENT
})
@JsonTypeName("v2RequestChallengesWebAuthN")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class V2RequestChallengesWebAuthN {
  public static final String JSON_PROPERTY_DOMAIN = "domain";
  @javax.annotation.Nonnull
  private String domain;

  public static final String JSON_PROPERTY_USER_VERIFICATION_REQUIREMENT = "userVerificationRequirement";
  @javax.annotation.Nonnull
  private V2UserVerificationRequirement userVerificationRequirement = V2UserVerificationRequirement.USER_VERIFICATION_REQUIREMENT_UNSPECIFIED;

  public V2RequestChallengesWebAuthN() {
  }

  public V2RequestChallengesWebAuthN domain(@javax.annotation.Nonnull String domain) {
    
    this.domain = domain;
    return this;
  }

  /**
   * \&quot;Domain on which the session was created. Will be used in the WebAuthN challenge.\&quot;
   * @return domain
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDomain() {
    return domain;
  }


  @JsonProperty(JSON_PROPERTY_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDomain(@javax.annotation.Nonnull String domain) {
    this.domain = domain;
  }

  public V2RequestChallengesWebAuthN userVerificationRequirement(@javax.annotation.Nonnull V2UserVerificationRequirement userVerificationRequirement) {
    
    this.userVerificationRequirement = userVerificationRequirement;
    return this;
  }

  /**
   * Get userVerificationRequirement
   * @return userVerificationRequirement
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USER_VERIFICATION_REQUIREMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public V2UserVerificationRequirement getUserVerificationRequirement() {
    return userVerificationRequirement;
  }


  @JsonProperty(JSON_PROPERTY_USER_VERIFICATION_REQUIREMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUserVerificationRequirement(@javax.annotation.Nonnull V2UserVerificationRequirement userVerificationRequirement) {
    this.userVerificationRequirement = userVerificationRequirement;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V2RequestChallengesWebAuthN v2RequestChallengesWebAuthN = (V2RequestChallengesWebAuthN) o;
    return Objects.equals(this.domain, v2RequestChallengesWebAuthN.domain) &&
        Objects.equals(this.userVerificationRequirement, v2RequestChallengesWebAuthN.userVerificationRequirement);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domain, userVerificationRequirement);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V2RequestChallengesWebAuthN {\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    userVerificationRequirement: ").append(toIndentedString(userVerificationRequirement)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `domain` to the URL query string
    if (getDomain() != null) {
      try {
        joiner.add(String.format("%sdomain%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDomain()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `userVerificationRequirement` to the URL query string
    if (getUserVerificationRequirement() != null) {
      try {
        joiner.add(String.format("%suserVerificationRequirement%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUserVerificationRequirement()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

