/*
 * Zitadel SDK
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zitadel.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.zitadel.model.ActionServiceBetaCondition;
import com.zitadel.model.ActionServiceBetaExecutionTargetType;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * ActionServiceBetaExecution
 */
@JsonPropertyOrder({
  ActionServiceBetaExecution.JSON_PROPERTY_CONDITION,
  ActionServiceBetaExecution.JSON_PROPERTY_CREATION_DATE,
  ActionServiceBetaExecution.JSON_PROPERTY_CHANGE_DATE,
  ActionServiceBetaExecution.JSON_PROPERTY_TARGETS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class ActionServiceBetaExecution {
  public static final String JSON_PROPERTY_CONDITION = "condition";
  @javax.annotation.Nullable
  private ActionServiceBetaCondition condition;

  public static final String JSON_PROPERTY_CREATION_DATE = "creationDate";
  @javax.annotation.Nullable
  private OffsetDateTime creationDate;

  public static final String JSON_PROPERTY_CHANGE_DATE = "changeDate";
  @javax.annotation.Nullable
  private OffsetDateTime changeDate;

  public static final String JSON_PROPERTY_TARGETS = "targets";
  @javax.annotation.Nullable
  private List<ActionServiceBetaExecutionTargetType> targets = new ArrayList<>();

  public ActionServiceBetaExecution() {
  }

  public ActionServiceBetaExecution condition(@javax.annotation.Nullable ActionServiceBetaCondition condition) {
    
    this.condition = condition;
    return this;
  }

  /**
   * Get condition
   * @return condition
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ActionServiceBetaCondition getCondition() {
    return condition;
  }


  @JsonProperty(JSON_PROPERTY_CONDITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCondition(@javax.annotation.Nullable ActionServiceBetaCondition condition) {
    this.condition = condition;
  }

  public ActionServiceBetaExecution creationDate(@javax.annotation.Nullable OffsetDateTime creationDate) {
    
    this.creationDate = creationDate;
    return this;
  }

  /**
   * The timestamp of the execution creation.
   * @return creationDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreationDate() {
    return creationDate;
  }


  @JsonProperty(JSON_PROPERTY_CREATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreationDate(@javax.annotation.Nullable OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }

  public ActionServiceBetaExecution changeDate(@javax.annotation.Nullable OffsetDateTime changeDate) {
    
    this.changeDate = changeDate;
    return this;
  }

  /**
   * The timestamp of the last change to the execution.
   * @return changeDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHANGE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getChangeDate() {
    return changeDate;
  }


  @JsonProperty(JSON_PROPERTY_CHANGE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChangeDate(@javax.annotation.Nullable OffsetDateTime changeDate) {
    this.changeDate = changeDate;
  }

  public ActionServiceBetaExecution targets(@javax.annotation.Nullable List<ActionServiceBetaExecutionTargetType> targets) {
    
    this.targets = targets;
    return this;
  }

  public ActionServiceBetaExecution addTargetsItem(ActionServiceBetaExecutionTargetType targetsItem) {
    if (this.targets == null) {
      this.targets = new ArrayList<>();
    }
    this.targets.add(targetsItem);
    return this;
  }

  /**
   * Ordered list of targets/includes called during the execution.
   * @return targets
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TARGETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ActionServiceBetaExecutionTargetType> getTargets() {
    return targets;
  }


  @JsonProperty(JSON_PROPERTY_TARGETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTargets(@javax.annotation.Nullable List<ActionServiceBetaExecutionTargetType> targets) {
    this.targets = targets;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActionServiceBetaExecution actionServiceBetaExecution = (ActionServiceBetaExecution) o;
    return Objects.equals(this.condition, actionServiceBetaExecution.condition) &&
        Objects.equals(this.creationDate, actionServiceBetaExecution.creationDate) &&
        Objects.equals(this.changeDate, actionServiceBetaExecution.changeDate) &&
        Objects.equals(this.targets, actionServiceBetaExecution.targets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(condition, creationDate, changeDate, targets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActionServiceBetaExecution {\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    changeDate: ").append(toIndentedString(changeDate)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `condition` to the URL query string
    if (getCondition() != null) {
      joiner.add(getCondition().toUrlQueryString(prefix + "condition" + suffix));
    }

    // add `creationDate` to the URL query string
    if (getCreationDate() != null) {
      try {
        joiner.add(String.format("%screationDate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreationDate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `changeDate` to the URL query string
    if (getChangeDate() != null) {
      try {
        joiner.add(String.format("%schangeDate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getChangeDate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `targets` to the URL query string
    if (getTargets() != null) {
      for (int i = 0; i < getTargets().size(); i++) {
        if (getTargets().get(i) != null) {
          joiner.add(getTargets().get(i).toUrlQueryString(String.format("%stargets%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }

}

