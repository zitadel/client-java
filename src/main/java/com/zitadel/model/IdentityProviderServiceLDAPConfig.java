/*
 * Zitadel SDK
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zitadel.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.zitadel.model.IdentityProviderServiceLDAPAttributes;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * IdentityProviderServiceLDAPConfig
 */
@JsonPropertyOrder({
  IdentityProviderServiceLDAPConfig.JSON_PROPERTY_SERVERS,
  IdentityProviderServiceLDAPConfig.JSON_PROPERTY_START_TLS,
  IdentityProviderServiceLDAPConfig.JSON_PROPERTY_BASE_DN,
  IdentityProviderServiceLDAPConfig.JSON_PROPERTY_BIND_DN,
  IdentityProviderServiceLDAPConfig.JSON_PROPERTY_USER_BASE,
  IdentityProviderServiceLDAPConfig.JSON_PROPERTY_USER_OBJECT_CLASSES,
  IdentityProviderServiceLDAPConfig.JSON_PROPERTY_USER_FILTERS,
  IdentityProviderServiceLDAPConfig.JSON_PROPERTY_TIMEOUT,
  IdentityProviderServiceLDAPConfig.JSON_PROPERTY_ATTRIBUTES,
  IdentityProviderServiceLDAPConfig.JSON_PROPERTY_ROOT_CA
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class IdentityProviderServiceLDAPConfig {
  public static final String JSON_PROPERTY_SERVERS = "servers";
  @javax.annotation.Nullable
  private List<String> servers = new ArrayList<>();

  public static final String JSON_PROPERTY_START_TLS = "startTls";
  @javax.annotation.Nullable
  private Boolean startTls;

  public static final String JSON_PROPERTY_BASE_DN = "baseDn";
  @javax.annotation.Nullable
  private String baseDn;

  public static final String JSON_PROPERTY_BIND_DN = "bindDn";
  @javax.annotation.Nullable
  private String bindDn;

  public static final String JSON_PROPERTY_USER_BASE = "userBase";
  @javax.annotation.Nullable
  private String userBase;

  public static final String JSON_PROPERTY_USER_OBJECT_CLASSES = "userObjectClasses";
  @javax.annotation.Nullable
  private List<String> userObjectClasses = new ArrayList<>();

  public static final String JSON_PROPERTY_USER_FILTERS = "userFilters";
  @javax.annotation.Nullable
  private List<String> userFilters = new ArrayList<>();

  public static final String JSON_PROPERTY_TIMEOUT = "timeout";
  @javax.annotation.Nullable
  private String timeout;

  public static final String JSON_PROPERTY_ATTRIBUTES = "attributes";
  @javax.annotation.Nullable
  private IdentityProviderServiceLDAPAttributes attributes;

  public static final String JSON_PROPERTY_ROOT_CA = "rootCa";
  @javax.annotation.Nullable
  private byte[] rootCa;

  public IdentityProviderServiceLDAPConfig() {
  }

  public IdentityProviderServiceLDAPConfig servers(@javax.annotation.Nullable List<String> servers) {
    
    this.servers = servers;
    return this;
  }

  public IdentityProviderServiceLDAPConfig addServersItem(String serversItem) {
    if (this.servers == null) {
      this.servers = new ArrayList<>();
    }
    this.servers.add(serversItem);
    return this;
  }

  /**
   * Get servers
   * @return servers
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getServers() {
    return servers;
  }


  @JsonProperty(JSON_PROPERTY_SERVERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServers(@javax.annotation.Nullable List<String> servers) {
    this.servers = servers;
  }

  public IdentityProviderServiceLDAPConfig startTls(@javax.annotation.Nullable Boolean startTls) {
    
    this.startTls = startTls;
    return this;
  }

  /**
   * Get startTls
   * @return startTls
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_START_TLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getStartTls() {
    return startTls;
  }


  @JsonProperty(JSON_PROPERTY_START_TLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartTls(@javax.annotation.Nullable Boolean startTls) {
    this.startTls = startTls;
  }

  public IdentityProviderServiceLDAPConfig baseDn(@javax.annotation.Nullable String baseDn) {
    
    this.baseDn = baseDn;
    return this;
  }

  /**
   * Get baseDn
   * @return baseDn
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BASE_DN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBaseDn() {
    return baseDn;
  }


  @JsonProperty(JSON_PROPERTY_BASE_DN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBaseDn(@javax.annotation.Nullable String baseDn) {
    this.baseDn = baseDn;
  }

  public IdentityProviderServiceLDAPConfig bindDn(@javax.annotation.Nullable String bindDn) {
    
    this.bindDn = bindDn;
    return this;
  }

  /**
   * Get bindDn
   * @return bindDn
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BIND_DN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBindDn() {
    return bindDn;
  }


  @JsonProperty(JSON_PROPERTY_BIND_DN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBindDn(@javax.annotation.Nullable String bindDn) {
    this.bindDn = bindDn;
  }

  public IdentityProviderServiceLDAPConfig userBase(@javax.annotation.Nullable String userBase) {
    
    this.userBase = userBase;
    return this;
  }

  /**
   * Get userBase
   * @return userBase
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_BASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserBase() {
    return userBase;
  }


  @JsonProperty(JSON_PROPERTY_USER_BASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserBase(@javax.annotation.Nullable String userBase) {
    this.userBase = userBase;
  }

  public IdentityProviderServiceLDAPConfig userObjectClasses(@javax.annotation.Nullable List<String> userObjectClasses) {
    
    this.userObjectClasses = userObjectClasses;
    return this;
  }

  public IdentityProviderServiceLDAPConfig addUserObjectClassesItem(String userObjectClassesItem) {
    if (this.userObjectClasses == null) {
      this.userObjectClasses = new ArrayList<>();
    }
    this.userObjectClasses.add(userObjectClassesItem);
    return this;
  }

  /**
   * Get userObjectClasses
   * @return userObjectClasses
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_OBJECT_CLASSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getUserObjectClasses() {
    return userObjectClasses;
  }


  @JsonProperty(JSON_PROPERTY_USER_OBJECT_CLASSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserObjectClasses(@javax.annotation.Nullable List<String> userObjectClasses) {
    this.userObjectClasses = userObjectClasses;
  }

  public IdentityProviderServiceLDAPConfig userFilters(@javax.annotation.Nullable List<String> userFilters) {
    
    this.userFilters = userFilters;
    return this;
  }

  public IdentityProviderServiceLDAPConfig addUserFiltersItem(String userFiltersItem) {
    if (this.userFilters == null) {
      this.userFilters = new ArrayList<>();
    }
    this.userFilters.add(userFiltersItem);
    return this;
  }

  /**
   * Get userFilters
   * @return userFilters
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getUserFilters() {
    return userFilters;
  }


  @JsonProperty(JSON_PROPERTY_USER_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserFilters(@javax.annotation.Nullable List<String> userFilters) {
    this.userFilters = userFilters;
  }

  public IdentityProviderServiceLDAPConfig timeout(@javax.annotation.Nullable String timeout) {
    
    this.timeout = timeout;
    return this;
  }

  /**
   * Get timeout
   * @return timeout
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTimeout() {
    return timeout;
  }


  @JsonProperty(JSON_PROPERTY_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeout(@javax.annotation.Nullable String timeout) {
    this.timeout = timeout;
  }

  public IdentityProviderServiceLDAPConfig attributes(@javax.annotation.Nullable IdentityProviderServiceLDAPAttributes attributes) {
    
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public IdentityProviderServiceLDAPAttributes getAttributes() {
    return attributes;
  }


  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttributes(@javax.annotation.Nullable IdentityProviderServiceLDAPAttributes attributes) {
    this.attributes = attributes;
  }

  public IdentityProviderServiceLDAPConfig rootCa(@javax.annotation.Nullable byte[] rootCa) {
    
    this.rootCa = rootCa;
    return this;
  }

  /**
   * Get rootCa
   * @return rootCa
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROOT_CA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public byte[] getRootCa() {
    return rootCa;
  }


  @JsonProperty(JSON_PROPERTY_ROOT_CA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRootCa(@javax.annotation.Nullable byte[] rootCa) {
    this.rootCa = rootCa;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentityProviderServiceLDAPConfig identityProviderServiceLDAPConfig = (IdentityProviderServiceLDAPConfig) o;
    return Objects.equals(this.servers, identityProviderServiceLDAPConfig.servers) &&
        Objects.equals(this.startTls, identityProviderServiceLDAPConfig.startTls) &&
        Objects.equals(this.baseDn, identityProviderServiceLDAPConfig.baseDn) &&
        Objects.equals(this.bindDn, identityProviderServiceLDAPConfig.bindDn) &&
        Objects.equals(this.userBase, identityProviderServiceLDAPConfig.userBase) &&
        Objects.equals(this.userObjectClasses, identityProviderServiceLDAPConfig.userObjectClasses) &&
        Objects.equals(this.userFilters, identityProviderServiceLDAPConfig.userFilters) &&
        Objects.equals(this.timeout, identityProviderServiceLDAPConfig.timeout) &&
        Objects.equals(this.attributes, identityProviderServiceLDAPConfig.attributes) &&
        Arrays.equals(this.rootCa, identityProviderServiceLDAPConfig.rootCa);
  }

  @Override
  public int hashCode() {
    return Objects.hash(servers, startTls, baseDn, bindDn, userBase, userObjectClasses, userFilters, timeout, attributes, Arrays.hashCode(rootCa));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentityProviderServiceLDAPConfig {\n");
    sb.append("    servers: ").append(toIndentedString(servers)).append("\n");
    sb.append("    startTls: ").append(toIndentedString(startTls)).append("\n");
    sb.append("    baseDn: ").append(toIndentedString(baseDn)).append("\n");
    sb.append("    bindDn: ").append(toIndentedString(bindDn)).append("\n");
    sb.append("    userBase: ").append(toIndentedString(userBase)).append("\n");
    sb.append("    userObjectClasses: ").append(toIndentedString(userObjectClasses)).append("\n");
    sb.append("    userFilters: ").append(toIndentedString(userFilters)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    rootCa: ").append(toIndentedString(rootCa)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `servers` to the URL query string
    if (getServers() != null) {
      for (int i = 0; i < getServers().size(); i++) {
        try {
          joiner.add(String.format("%sservers%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getServers().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `startTls` to the URL query string
    if (getStartTls() != null) {
      try {
        joiner.add(String.format("%sstartTls%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStartTls()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `baseDn` to the URL query string
    if (getBaseDn() != null) {
      try {
        joiner.add(String.format("%sbaseDn%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBaseDn()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `bindDn` to the URL query string
    if (getBindDn() != null) {
      try {
        joiner.add(String.format("%sbindDn%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBindDn()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `userBase` to the URL query string
    if (getUserBase() != null) {
      try {
        joiner.add(String.format("%suserBase%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUserBase()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `userObjectClasses` to the URL query string
    if (getUserObjectClasses() != null) {
      for (int i = 0; i < getUserObjectClasses().size(); i++) {
        try {
          joiner.add(String.format("%suserObjectClasses%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getUserObjectClasses().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `userFilters` to the URL query string
    if (getUserFilters() != null) {
      for (int i = 0; i < getUserFilters().size(); i++) {
        try {
          joiner.add(String.format("%suserFilters%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getUserFilters().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `timeout` to the URL query string
    if (getTimeout() != null) {
      try {
        joiner.add(String.format("%stimeout%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTimeout()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `attributes` to the URL query string
    if (getAttributes() != null) {
      joiner.add(getAttributes().toUrlQueryString(prefix + "attributes" + suffix));
    }

    // add `rootCa` to the URL query string
    if (getRootCa() != null) {
      try {
        joiner.add(String.format("%srootCa%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRootCa()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

