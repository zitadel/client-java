/*
 * Zitadel SDK
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zitadel.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * SettingsServiceGetGeneralSettingsResponse
 */
@JsonPropertyOrder({
  SettingsServiceGetGeneralSettingsResponse.JSON_PROPERTY_DEFAULT_ORG_ID,
  SettingsServiceGetGeneralSettingsResponse.JSON_PROPERTY_DEFAULT_LANGUAGE,
  SettingsServiceGetGeneralSettingsResponse.JSON_PROPERTY_SUPPORTED_LANGUAGES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class SettingsServiceGetGeneralSettingsResponse {
  public static final String JSON_PROPERTY_DEFAULT_ORG_ID = "defaultOrgId";
  @javax.annotation.Nullable
  private String defaultOrgId;

  public static final String JSON_PROPERTY_DEFAULT_LANGUAGE = "defaultLanguage";
  @javax.annotation.Nullable
  private String defaultLanguage;

  public static final String JSON_PROPERTY_SUPPORTED_LANGUAGES = "supportedLanguages";
  @javax.annotation.Nullable
  private List<String> supportedLanguages = new ArrayList<>();

  public SettingsServiceGetGeneralSettingsResponse() {
  }

  public SettingsServiceGetGeneralSettingsResponse defaultOrgId(@javax.annotation.Nullable String defaultOrgId) {
    
    this.defaultOrgId = defaultOrgId;
    return this;
  }

  /**
   * default organization for the current context
   * @return defaultOrgId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_ORG_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDefaultOrgId() {
    return defaultOrgId;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_ORG_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultOrgId(@javax.annotation.Nullable String defaultOrgId) {
    this.defaultOrgId = defaultOrgId;
  }

  public SettingsServiceGetGeneralSettingsResponse defaultLanguage(@javax.annotation.Nullable String defaultLanguage) {
    
    this.defaultLanguage = defaultLanguage;
    return this;
  }

  /**
   * default language for the current context
   * @return defaultLanguage
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDefaultLanguage() {
    return defaultLanguage;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultLanguage(@javax.annotation.Nullable String defaultLanguage) {
    this.defaultLanguage = defaultLanguage;
  }

  public SettingsServiceGetGeneralSettingsResponse supportedLanguages(@javax.annotation.Nullable List<String> supportedLanguages) {
    
    this.supportedLanguages = supportedLanguages;
    return this;
  }

  public SettingsServiceGetGeneralSettingsResponse addSupportedLanguagesItem(String supportedLanguagesItem) {
    if (this.supportedLanguages == null) {
      this.supportedLanguages = new ArrayList<>();
    }
    this.supportedLanguages.add(supportedLanguagesItem);
    return this;
  }

  /**
   * Get supportedLanguages
   * @return supportedLanguages
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUPPORTED_LANGUAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getSupportedLanguages() {
    return supportedLanguages;
  }


  @JsonProperty(JSON_PROPERTY_SUPPORTED_LANGUAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSupportedLanguages(@javax.annotation.Nullable List<String> supportedLanguages) {
    this.supportedLanguages = supportedLanguages;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettingsServiceGetGeneralSettingsResponse settingsServiceGetGeneralSettingsResponse = (SettingsServiceGetGeneralSettingsResponse) o;
    return Objects.equals(this.defaultOrgId, settingsServiceGetGeneralSettingsResponse.defaultOrgId) &&
        Objects.equals(this.defaultLanguage, settingsServiceGetGeneralSettingsResponse.defaultLanguage) &&
        Objects.equals(this.supportedLanguages, settingsServiceGetGeneralSettingsResponse.supportedLanguages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultOrgId, defaultLanguage, supportedLanguages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettingsServiceGetGeneralSettingsResponse {\n");
    sb.append("    defaultOrgId: ").append(toIndentedString(defaultOrgId)).append("\n");
    sb.append("    defaultLanguage: ").append(toIndentedString(defaultLanguage)).append("\n");
    sb.append("    supportedLanguages: ").append(toIndentedString(supportedLanguages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `defaultOrgId` to the URL query string
    if (getDefaultOrgId() != null) {
      try {
        joiner.add(String.format("%sdefaultOrgId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDefaultOrgId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `defaultLanguage` to the URL query string
    if (getDefaultLanguage() != null) {
      try {
        joiner.add(String.format("%sdefaultLanguage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDefaultLanguage()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `supportedLanguages` to the URL query string
    if (getSupportedLanguages() != null) {
      for (int i = 0; i < getSupportedLanguages().size(); i++) {
        try {
          joiner.add(String.format("%ssupportedLanguages%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getSupportedLanguages().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    return joiner.toString();
  }

}

