/*
 * Zitadel SDK
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zitadel.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/**
 * V2LoginSettings
 */
@JsonPropertyOrder({
  V2LoginSettings.JSON_PROPERTY_ALLOW_USERNAME_PASSWORD,
  V2LoginSettings.JSON_PROPERTY_ALLOW_REGISTER,
  V2LoginSettings.JSON_PROPERTY_ALLOW_EXTERNAL_IDP,
  V2LoginSettings.JSON_PROPERTY_FORCE_MFA,
  V2LoginSettings.JSON_PROPERTY_PASSKEYS_TYPE,
  V2LoginSettings.JSON_PROPERTY_HIDE_PASSWORD_RESET,
  V2LoginSettings.JSON_PROPERTY_IGNORE_UNKNOWN_USERNAMES,
  V2LoginSettings.JSON_PROPERTY_DEFAULT_REDIRECT_URI,
  V2LoginSettings.JSON_PROPERTY_PASSWORD_CHECK_LIFETIME,
  V2LoginSettings.JSON_PROPERTY_EXTERNAL_LOGIN_CHECK_LIFETIME,
  V2LoginSettings.JSON_PROPERTY_MFA_INIT_SKIP_LIFETIME,
  V2LoginSettings.JSON_PROPERTY_SECOND_FACTOR_CHECK_LIFETIME,
  V2LoginSettings.JSON_PROPERTY_MULTI_FACTOR_CHECK_LIFETIME,
  V2LoginSettings.JSON_PROPERTY_SECOND_FACTORS,
  V2LoginSettings.JSON_PROPERTY_MULTI_FACTORS,
  V2LoginSettings.JSON_PROPERTY_ALLOW_DOMAIN_DISCOVERY,
  V2LoginSettings.JSON_PROPERTY_DISABLE_LOGIN_WITH_EMAIL,
  V2LoginSettings.JSON_PROPERTY_DISABLE_LOGIN_WITH_PHONE,
  V2LoginSettings.JSON_PROPERTY_RESOURCE_OWNER_TYPE,
  V2LoginSettings.JSON_PROPERTY_FORCE_MFA_LOCAL_ONLY
})
@JsonTypeName("v2LoginSettings")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class V2LoginSettings {
  public static final String JSON_PROPERTY_ALLOW_USERNAME_PASSWORD = "allowUsernamePassword";
  public static final String JSON_PROPERTY_ALLOW_REGISTER = "allowRegister";
  public static final String JSON_PROPERTY_ALLOW_EXTERNAL_IDP = "allowExternalIdp";
  public static final String JSON_PROPERTY_FORCE_MFA = "forceMfa";
  public static final String JSON_PROPERTY_PASSKEYS_TYPE = "passkeysType";
  public static final String JSON_PROPERTY_HIDE_PASSWORD_RESET = "hidePasswordReset";
  public static final String JSON_PROPERTY_IGNORE_UNKNOWN_USERNAMES = "ignoreUnknownUsernames";
  public static final String JSON_PROPERTY_DEFAULT_REDIRECT_URI = "defaultRedirectUri";
  public static final String JSON_PROPERTY_PASSWORD_CHECK_LIFETIME = "passwordCheckLifetime";
  public static final String JSON_PROPERTY_EXTERNAL_LOGIN_CHECK_LIFETIME = "externalLoginCheckLifetime";
  public static final String JSON_PROPERTY_MFA_INIT_SKIP_LIFETIME = "mfaInitSkipLifetime";
  public static final String JSON_PROPERTY_SECOND_FACTOR_CHECK_LIFETIME = "secondFactorCheckLifetime";
  public static final String JSON_PROPERTY_MULTI_FACTOR_CHECK_LIFETIME = "multiFactorCheckLifetime";
  public static final String JSON_PROPERTY_SECOND_FACTORS = "secondFactors";
  public static final String JSON_PROPERTY_MULTI_FACTORS = "multiFactors";
  public static final String JSON_PROPERTY_ALLOW_DOMAIN_DISCOVERY = "allowDomainDiscovery";
  public static final String JSON_PROPERTY_DISABLE_LOGIN_WITH_EMAIL = "disableLoginWithEmail";
  public static final String JSON_PROPERTY_DISABLE_LOGIN_WITH_PHONE = "disableLoginWithPhone";
  public static final String JSON_PROPERTY_RESOURCE_OWNER_TYPE = "resourceOwnerType";
  public static final String JSON_PROPERTY_FORCE_MFA_LOCAL_ONLY = "forceMfaLocalOnly";
  @javax.annotation.Nullable
  private Boolean allowUsernamePassword;
  @javax.annotation.Nullable
  private Boolean allowRegister;
  @javax.annotation.Nullable
  private Boolean allowExternalIdp;
  @javax.annotation.Nullable
  private Boolean forceMfa;
  @javax.annotation.Nullable
  private V2PasskeysType passkeysType = V2PasskeysType.PASSKEYS_TYPE_NOT_ALLOWED;
  @javax.annotation.Nullable
  private Boolean hidePasswordReset;
  @javax.annotation.Nullable
  private Boolean ignoreUnknownUsernames;
  @javax.annotation.Nullable
  private String defaultRedirectUri;
  @javax.annotation.Nullable
  private String passwordCheckLifetime;
  @javax.annotation.Nullable
  private String externalLoginCheckLifetime;
  @javax.annotation.Nullable
  private String mfaInitSkipLifetime;
  @javax.annotation.Nullable
  private String secondFactorCheckLifetime;
  @javax.annotation.Nullable
  private String multiFactorCheckLifetime;
  @javax.annotation.Nullable
  private List<V2SecondFactorType> secondFactors = new ArrayList<>();
  @javax.annotation.Nullable
  private List<V2MultiFactorType> multiFactors = new ArrayList<>();
  @javax.annotation.Nullable
  private Boolean allowDomainDiscovery;
  @javax.annotation.Nullable
  private Boolean disableLoginWithEmail;
  @javax.annotation.Nullable
  private Boolean disableLoginWithPhone;
  @javax.annotation.Nullable
  private V2ResourceOwnerType resourceOwnerType = V2ResourceOwnerType.RESOURCE_OWNER_TYPE_UNSPECIFIED;
  @javax.annotation.Nullable
  private Boolean forceMfaLocalOnly;

  public V2LoginSettings() {
  }

  public V2LoginSettings allowUsernamePassword(@javax.annotation.Nullable Boolean allowUsernamePassword) {

    this.allowUsernamePassword = allowUsernamePassword;
    return this;
  }

  /**
   * defines if a user is allowed to log in with username and password
   *
   * @return allowUsernamePassword
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOW_USERNAME_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAllowUsernamePassword() {
    return allowUsernamePassword;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_USERNAME_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowUsernamePassword(@javax.annotation.Nullable Boolean allowUsernamePassword) {
    this.allowUsernamePassword = allowUsernamePassword;
  }

  public V2LoginSettings allowRegister(@javax.annotation.Nullable Boolean allowRegister) {

    this.allowRegister = allowRegister;
    return this;
  }

  /**
   * defines if a person is allowed to register a user on this organization
   *
   * @return allowRegister
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOW_REGISTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAllowRegister() {
    return allowRegister;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_REGISTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowRegister(@javax.annotation.Nullable Boolean allowRegister) {
    this.allowRegister = allowRegister;
  }

  public V2LoginSettings allowExternalIdp(@javax.annotation.Nullable Boolean allowExternalIdp) {

    this.allowExternalIdp = allowExternalIdp;
    return this;
  }

  /**
   * defines if a user is allowed to add a defined identity provider. E.g. Google auth
   *
   * @return allowExternalIdp
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOW_EXTERNAL_IDP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAllowExternalIdp() {
    return allowExternalIdp;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_EXTERNAL_IDP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowExternalIdp(@javax.annotation.Nullable Boolean allowExternalIdp) {
    this.allowExternalIdp = allowExternalIdp;
  }

  public V2LoginSettings forceMfa(@javax.annotation.Nullable Boolean forceMfa) {

    this.forceMfa = forceMfa;
    return this;
  }

  /**
   * defines if a user MUST use a multi-factor to log in
   *
   * @return forceMfa
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FORCE_MFA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getForceMfa() {
    return forceMfa;
  }


  @JsonProperty(JSON_PROPERTY_FORCE_MFA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setForceMfa(@javax.annotation.Nullable Boolean forceMfa) {
    this.forceMfa = forceMfa;
  }

  public V2LoginSettings passkeysType(@javax.annotation.Nullable V2PasskeysType passkeysType) {

    this.passkeysType = passkeysType;
    return this;
  }

  /**
   * Get passkeysType
   *
   * @return passkeysType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PASSKEYS_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public V2PasskeysType getPasskeysType() {
    return passkeysType;
  }


  @JsonProperty(JSON_PROPERTY_PASSKEYS_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPasskeysType(@javax.annotation.Nullable V2PasskeysType passkeysType) {
    this.passkeysType = passkeysType;
  }

  public V2LoginSettings hidePasswordReset(@javax.annotation.Nullable Boolean hidePasswordReset) {

    this.hidePasswordReset = hidePasswordReset;
    return this;
  }

  /**
   * defines if password reset link should be shown in the login screen
   *
   * @return hidePasswordReset
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HIDE_PASSWORD_RESET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHidePasswordReset() {
    return hidePasswordReset;
  }


  @JsonProperty(JSON_PROPERTY_HIDE_PASSWORD_RESET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHidePasswordReset(@javax.annotation.Nullable Boolean hidePasswordReset) {
    this.hidePasswordReset = hidePasswordReset;
  }

  public V2LoginSettings ignoreUnknownUsernames(@javax.annotation.Nullable Boolean ignoreUnknownUsernames) {

    this.ignoreUnknownUsernames = ignoreUnknownUsernames;
    return this;
  }

  /**
   * defines if unknown username on login screen directly returns an error or always displays the password screen
   *
   * @return ignoreUnknownUsernames
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IGNORE_UNKNOWN_USERNAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIgnoreUnknownUsernames() {
    return ignoreUnknownUsernames;
  }


  @JsonProperty(JSON_PROPERTY_IGNORE_UNKNOWN_USERNAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIgnoreUnknownUsernames(@javax.annotation.Nullable Boolean ignoreUnknownUsernames) {
    this.ignoreUnknownUsernames = ignoreUnknownUsernames;
  }

  public V2LoginSettings defaultRedirectUri(@javax.annotation.Nullable String defaultRedirectUri) {

    this.defaultRedirectUri = defaultRedirectUri;
    return this;
  }

  /**
   * defines where the user will be redirected to if the login is started without app context (e.g. from mail)
   *
   * @return defaultRedirectUri
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_REDIRECT_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDefaultRedirectUri() {
    return defaultRedirectUri;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_REDIRECT_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultRedirectUri(@javax.annotation.Nullable String defaultRedirectUri) {
    this.defaultRedirectUri = defaultRedirectUri;
  }

  public V2LoginSettings passwordCheckLifetime(@javax.annotation.Nullable String passwordCheckLifetime) {

    this.passwordCheckLifetime = passwordCheckLifetime;
    return this;
  }

  /**
   * Defines after how much time the user has to re-authenticate with the password.
   *
   * @return passwordCheckLifetime
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PASSWORD_CHECK_LIFETIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPasswordCheckLifetime() {
    return passwordCheckLifetime;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD_CHECK_LIFETIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPasswordCheckLifetime(@javax.annotation.Nullable String passwordCheckLifetime) {
    this.passwordCheckLifetime = passwordCheckLifetime;
  }

  public V2LoginSettings externalLoginCheckLifetime(@javax.annotation.Nullable String externalLoginCheckLifetime) {

    this.externalLoginCheckLifetime = externalLoginCheckLifetime;
    return this;
  }

  /**
   * Defines after how much time the user has to re-authenticate with an external provider.
   *
   * @return externalLoginCheckLifetime
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTERNAL_LOGIN_CHECK_LIFETIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExternalLoginCheckLifetime() {
    return externalLoginCheckLifetime;
  }


  @JsonProperty(JSON_PROPERTY_EXTERNAL_LOGIN_CHECK_LIFETIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExternalLoginCheckLifetime(@javax.annotation.Nullable String externalLoginCheckLifetime) {
    this.externalLoginCheckLifetime = externalLoginCheckLifetime;
  }

  public V2LoginSettings mfaInitSkipLifetime(@javax.annotation.Nullable String mfaInitSkipLifetime) {

    this.mfaInitSkipLifetime = mfaInitSkipLifetime;
    return this;
  }

  /**
   * Defines after how much time the mfa prompt will be shown again.
   *
   * @return mfaInitSkipLifetime
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MFA_INIT_SKIP_LIFETIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMfaInitSkipLifetime() {
    return mfaInitSkipLifetime;
  }


  @JsonProperty(JSON_PROPERTY_MFA_INIT_SKIP_LIFETIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMfaInitSkipLifetime(@javax.annotation.Nullable String mfaInitSkipLifetime) {
    this.mfaInitSkipLifetime = mfaInitSkipLifetime;
  }

  public V2LoginSettings secondFactorCheckLifetime(@javax.annotation.Nullable String secondFactorCheckLifetime) {

    this.secondFactorCheckLifetime = secondFactorCheckLifetime;
    return this;
  }

  /**
   * Defines after how long the second factor check is valid.
   *
   * @return secondFactorCheckLifetime
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECOND_FACTOR_CHECK_LIFETIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSecondFactorCheckLifetime() {
    return secondFactorCheckLifetime;
  }


  @JsonProperty(JSON_PROPERTY_SECOND_FACTOR_CHECK_LIFETIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecondFactorCheckLifetime(@javax.annotation.Nullable String secondFactorCheckLifetime) {
    this.secondFactorCheckLifetime = secondFactorCheckLifetime;
  }

  public V2LoginSettings multiFactorCheckLifetime(@javax.annotation.Nullable String multiFactorCheckLifetime) {

    this.multiFactorCheckLifetime = multiFactorCheckLifetime;
    return this;
  }

  /**
   * Defines how long the multi-factor check is valid.
   *
   * @return multiFactorCheckLifetime
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MULTI_FACTOR_CHECK_LIFETIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMultiFactorCheckLifetime() {
    return multiFactorCheckLifetime;
  }


  @JsonProperty(JSON_PROPERTY_MULTI_FACTOR_CHECK_LIFETIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMultiFactorCheckLifetime(@javax.annotation.Nullable String multiFactorCheckLifetime) {
    this.multiFactorCheckLifetime = multiFactorCheckLifetime;
  }

  public V2LoginSettings secondFactors(@javax.annotation.Nullable List<V2SecondFactorType> secondFactors) {

    this.secondFactors = secondFactors;
    return this;
  }

  public V2LoginSettings addSecondFactorsItem(V2SecondFactorType secondFactorsItem) {
    if (this.secondFactors == null) {
      this.secondFactors = new ArrayList<>();
    }
    this.secondFactors.add(secondFactorsItem);
    return this;
  }

  /**
   * Get secondFactors
   *
   * @return secondFactors
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECOND_FACTORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<V2SecondFactorType> getSecondFactors() {
    return secondFactors;
  }


  @JsonProperty(JSON_PROPERTY_SECOND_FACTORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecondFactors(@javax.annotation.Nullable List<V2SecondFactorType> secondFactors) {
    this.secondFactors = secondFactors;
  }

  public V2LoginSettings multiFactors(@javax.annotation.Nullable List<V2MultiFactorType> multiFactors) {

    this.multiFactors = multiFactors;
    return this;
  }

  public V2LoginSettings addMultiFactorsItem(V2MultiFactorType multiFactorsItem) {
    if (this.multiFactors == null) {
      this.multiFactors = new ArrayList<>();
    }
    this.multiFactors.add(multiFactorsItem);
    return this;
  }

  /**
   * Get multiFactors
   *
   * @return multiFactors
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MULTI_FACTORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<V2MultiFactorType> getMultiFactors() {
    return multiFactors;
  }


  @JsonProperty(JSON_PROPERTY_MULTI_FACTORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMultiFactors(@javax.annotation.Nullable List<V2MultiFactorType> multiFactors) {
    this.multiFactors = multiFactors;
  }

  public V2LoginSettings allowDomainDiscovery(@javax.annotation.Nullable Boolean allowDomainDiscovery) {

    this.allowDomainDiscovery = allowDomainDiscovery;
    return this;
  }

  /**
   * If set to true, the suffix (@domain.com) of an unknown username input on the login screen will be matched against the org domains and will redirect to the registration of that organization on success.
   *
   * @return allowDomainDiscovery
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOW_DOMAIN_DISCOVERY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAllowDomainDiscovery() {
    return allowDomainDiscovery;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_DOMAIN_DISCOVERY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowDomainDiscovery(@javax.annotation.Nullable Boolean allowDomainDiscovery) {
    this.allowDomainDiscovery = allowDomainDiscovery;
  }

  public V2LoginSettings disableLoginWithEmail(@javax.annotation.Nullable Boolean disableLoginWithEmail) {

    this.disableLoginWithEmail = disableLoginWithEmail;
    return this;
  }

  /**
   * defines if the user can additionally (to the login name) be identified by their verified email address
   *
   * @return disableLoginWithEmail
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISABLE_LOGIN_WITH_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDisableLoginWithEmail() {
    return disableLoginWithEmail;
  }


  @JsonProperty(JSON_PROPERTY_DISABLE_LOGIN_WITH_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisableLoginWithEmail(@javax.annotation.Nullable Boolean disableLoginWithEmail) {
    this.disableLoginWithEmail = disableLoginWithEmail;
  }

  public V2LoginSettings disableLoginWithPhone(@javax.annotation.Nullable Boolean disableLoginWithPhone) {

    this.disableLoginWithPhone = disableLoginWithPhone;
    return this;
  }

  /**
   * defines if the user can additionally (to the login name) be identified by their verified phone number
   *
   * @return disableLoginWithPhone
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISABLE_LOGIN_WITH_PHONE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDisableLoginWithPhone() {
    return disableLoginWithPhone;
  }


  @JsonProperty(JSON_PROPERTY_DISABLE_LOGIN_WITH_PHONE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisableLoginWithPhone(@javax.annotation.Nullable Boolean disableLoginWithPhone) {
    this.disableLoginWithPhone = disableLoginWithPhone;
  }

  public V2LoginSettings resourceOwnerType(@javax.annotation.Nullable V2ResourceOwnerType resourceOwnerType) {

    this.resourceOwnerType = resourceOwnerType;
    return this;
  }

  /**
   * Get resourceOwnerType
   *
   * @return resourceOwnerType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESOURCE_OWNER_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public V2ResourceOwnerType getResourceOwnerType() {
    return resourceOwnerType;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCE_OWNER_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResourceOwnerType(@javax.annotation.Nullable V2ResourceOwnerType resourceOwnerType) {
    this.resourceOwnerType = resourceOwnerType;
  }

  public V2LoginSettings forceMfaLocalOnly(@javax.annotation.Nullable Boolean forceMfaLocalOnly) {

    this.forceMfaLocalOnly = forceMfaLocalOnly;
    return this;
  }

  /**
   * if activated, only local authenticated users are forced to use MFA. Authentication through IDPs won&#39;t prompt a MFA step in the login.
   *
   * @return forceMfaLocalOnly
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FORCE_MFA_LOCAL_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getForceMfaLocalOnly() {
    return forceMfaLocalOnly;
  }


  @JsonProperty(JSON_PROPERTY_FORCE_MFA_LOCAL_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setForceMfaLocalOnly(@javax.annotation.Nullable Boolean forceMfaLocalOnly) {
    this.forceMfaLocalOnly = forceMfaLocalOnly;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V2LoginSettings v2LoginSettings = (V2LoginSettings) o;
    return Objects.equals(this.allowUsernamePassword, v2LoginSettings.allowUsernamePassword) &&
      Objects.equals(this.allowRegister, v2LoginSettings.allowRegister) &&
      Objects.equals(this.allowExternalIdp, v2LoginSettings.allowExternalIdp) &&
      Objects.equals(this.forceMfa, v2LoginSettings.forceMfa) &&
      Objects.equals(this.passkeysType, v2LoginSettings.passkeysType) &&
      Objects.equals(this.hidePasswordReset, v2LoginSettings.hidePasswordReset) &&
      Objects.equals(this.ignoreUnknownUsernames, v2LoginSettings.ignoreUnknownUsernames) &&
      Objects.equals(this.defaultRedirectUri, v2LoginSettings.defaultRedirectUri) &&
      Objects.equals(this.passwordCheckLifetime, v2LoginSettings.passwordCheckLifetime) &&
      Objects.equals(this.externalLoginCheckLifetime, v2LoginSettings.externalLoginCheckLifetime) &&
      Objects.equals(this.mfaInitSkipLifetime, v2LoginSettings.mfaInitSkipLifetime) &&
      Objects.equals(this.secondFactorCheckLifetime, v2LoginSettings.secondFactorCheckLifetime) &&
      Objects.equals(this.multiFactorCheckLifetime, v2LoginSettings.multiFactorCheckLifetime) &&
      Objects.equals(this.secondFactors, v2LoginSettings.secondFactors) &&
      Objects.equals(this.multiFactors, v2LoginSettings.multiFactors) &&
      Objects.equals(this.allowDomainDiscovery, v2LoginSettings.allowDomainDiscovery) &&
      Objects.equals(this.disableLoginWithEmail, v2LoginSettings.disableLoginWithEmail) &&
      Objects.equals(this.disableLoginWithPhone, v2LoginSettings.disableLoginWithPhone) &&
      Objects.equals(this.resourceOwnerType, v2LoginSettings.resourceOwnerType) &&
      Objects.equals(this.forceMfaLocalOnly, v2LoginSettings.forceMfaLocalOnly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowUsernamePassword, allowRegister, allowExternalIdp, forceMfa, passkeysType, hidePasswordReset, ignoreUnknownUsernames, defaultRedirectUri, passwordCheckLifetime, externalLoginCheckLifetime, mfaInitSkipLifetime, secondFactorCheckLifetime, multiFactorCheckLifetime, secondFactors, multiFactors, allowDomainDiscovery, disableLoginWithEmail, disableLoginWithPhone, resourceOwnerType, forceMfaLocalOnly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V2LoginSettings {\n");
    sb.append("    allowUsernamePassword: ").append(toIndentedString(allowUsernamePassword)).append("\n");
    sb.append("    allowRegister: ").append(toIndentedString(allowRegister)).append("\n");
    sb.append("    allowExternalIdp: ").append(toIndentedString(allowExternalIdp)).append("\n");
    sb.append("    forceMfa: ").append(toIndentedString(forceMfa)).append("\n");
    sb.append("    passkeysType: ").append(toIndentedString(passkeysType)).append("\n");
    sb.append("    hidePasswordReset: ").append(toIndentedString(hidePasswordReset)).append("\n");
    sb.append("    ignoreUnknownUsernames: ").append(toIndentedString(ignoreUnknownUsernames)).append("\n");
    sb.append("    defaultRedirectUri: ").append(toIndentedString(defaultRedirectUri)).append("\n");
    sb.append("    passwordCheckLifetime: ").append(toIndentedString(passwordCheckLifetime)).append("\n");
    sb.append("    externalLoginCheckLifetime: ").append(toIndentedString(externalLoginCheckLifetime)).append("\n");
    sb.append("    mfaInitSkipLifetime: ").append(toIndentedString(mfaInitSkipLifetime)).append("\n");
    sb.append("    secondFactorCheckLifetime: ").append(toIndentedString(secondFactorCheckLifetime)).append("\n");
    sb.append("    multiFactorCheckLifetime: ").append(toIndentedString(multiFactorCheckLifetime)).append("\n");
    sb.append("    secondFactors: ").append(toIndentedString(secondFactors)).append("\n");
    sb.append("    multiFactors: ").append(toIndentedString(multiFactors)).append("\n");
    sb.append("    allowDomainDiscovery: ").append(toIndentedString(allowDomainDiscovery)).append("\n");
    sb.append("    disableLoginWithEmail: ").append(toIndentedString(disableLoginWithEmail)).append("\n");
    sb.append("    disableLoginWithPhone: ").append(toIndentedString(disableLoginWithPhone)).append("\n");
    sb.append("    resourceOwnerType: ").append(toIndentedString(resourceOwnerType)).append("\n");
    sb.append("    forceMfaLocalOnly: ").append(toIndentedString(forceMfaLocalOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `allowUsernamePassword` to the URL query string
    if (getAllowUsernamePassword() != null) {
      try {
        joiner.add(String.format("%sallowUsernamePassword%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAllowUsernamePassword()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `allowRegister` to the URL query string
    if (getAllowRegister() != null) {
      try {
        joiner.add(String.format("%sallowRegister%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAllowRegister()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `allowExternalIdp` to the URL query string
    if (getAllowExternalIdp() != null) {
      try {
        joiner.add(String.format("%sallowExternalIdp%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAllowExternalIdp()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `forceMfa` to the URL query string
    if (getForceMfa() != null) {
      try {
        joiner.add(String.format("%sforceMfa%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getForceMfa()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `passkeysType` to the URL query string
    if (getPasskeysType() != null) {
      try {
        joiner.add(String.format("%spasskeysType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPasskeysType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `hidePasswordReset` to the URL query string
    if (getHidePasswordReset() != null) {
      try {
        joiner.add(String.format("%shidePasswordReset%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHidePasswordReset()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `ignoreUnknownUsernames` to the URL query string
    if (getIgnoreUnknownUsernames() != null) {
      try {
        joiner.add(String.format("%signoreUnknownUsernames%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIgnoreUnknownUsernames()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `defaultRedirectUri` to the URL query string
    if (getDefaultRedirectUri() != null) {
      try {
        joiner.add(String.format("%sdefaultRedirectUri%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDefaultRedirectUri()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `passwordCheckLifetime` to the URL query string
    if (getPasswordCheckLifetime() != null) {
      try {
        joiner.add(String.format("%spasswordCheckLifetime%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPasswordCheckLifetime()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `externalLoginCheckLifetime` to the URL query string
    if (getExternalLoginCheckLifetime() != null) {
      try {
        joiner.add(String.format("%sexternalLoginCheckLifetime%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExternalLoginCheckLifetime()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `mfaInitSkipLifetime` to the URL query string
    if (getMfaInitSkipLifetime() != null) {
      try {
        joiner.add(String.format("%smfaInitSkipLifetime%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMfaInitSkipLifetime()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `secondFactorCheckLifetime` to the URL query string
    if (getSecondFactorCheckLifetime() != null) {
      try {
        joiner.add(String.format("%ssecondFactorCheckLifetime%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSecondFactorCheckLifetime()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `multiFactorCheckLifetime` to the URL query string
    if (getMultiFactorCheckLifetime() != null) {
      try {
        joiner.add(String.format("%smultiFactorCheckLifetime%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMultiFactorCheckLifetime()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `secondFactors` to the URL query string
    if (getSecondFactors() != null) {
      for (int i = 0; i < getSecondFactors().size(); i++) {
        if (getSecondFactors().get(i) != null) {
          try {
            joiner.add(String.format("%ssecondFactors%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getSecondFactors().get(i)), "UTF-8").replaceAll("\\+", "%20")));
          } catch (UnsupportedEncodingException e) {
            // Should never happen, UTF-8 is always supported
            throw new RuntimeException(e);
          }
        }
      }
    }

    // add `multiFactors` to the URL query string
    if (getMultiFactors() != null) {
      for (int i = 0; i < getMultiFactors().size(); i++) {
        if (getMultiFactors().get(i) != null) {
          try {
            joiner.add(String.format("%smultiFactors%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getMultiFactors().get(i)), "UTF-8").replaceAll("\\+", "%20")));
          } catch (UnsupportedEncodingException e) {
            // Should never happen, UTF-8 is always supported
            throw new RuntimeException(e);
          }
        }
      }
    }

    // add `allowDomainDiscovery` to the URL query string
    if (getAllowDomainDiscovery() != null) {
      try {
        joiner.add(String.format("%sallowDomainDiscovery%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAllowDomainDiscovery()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `disableLoginWithEmail` to the URL query string
    if (getDisableLoginWithEmail() != null) {
      try {
        joiner.add(String.format("%sdisableLoginWithEmail%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDisableLoginWithEmail()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `disableLoginWithPhone` to the URL query string
    if (getDisableLoginWithPhone() != null) {
      try {
        joiner.add(String.format("%sdisableLoginWithPhone%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDisableLoginWithPhone()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `resourceOwnerType` to the URL query string
    if (getResourceOwnerType() != null) {
      try {
        joiner.add(String.format("%sresourceOwnerType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getResourceOwnerType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `forceMfaLocalOnly` to the URL query string
    if (getForceMfaLocalOnly() != null) {
      try {
        joiner.add(String.format("%sforceMfaLocalOnly%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getForceMfaLocalOnly()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

