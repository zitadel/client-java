/*
 * Zitadel SDK
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zitadel.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Objects;
import java.util.StringJoiner;

/**
 * V2IDPInformation
 */
@JsonPropertyOrder({
  V2IDPInformation.JSON_PROPERTY_OAUTH,
  V2IDPInformation.JSON_PROPERTY_LDAP,
  V2IDPInformation.JSON_PROPERTY_SAML,
  V2IDPInformation.JSON_PROPERTY_IDP_ID,
  V2IDPInformation.JSON_PROPERTY_USER_ID,
  V2IDPInformation.JSON_PROPERTY_USER_NAME,
  V2IDPInformation.JSON_PROPERTY_RAW_INFORMATION
})
@JsonTypeName("v2IDPInformation")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class V2IDPInformation {
  public static final String JSON_PROPERTY_OAUTH = "oauth";
  public static final String JSON_PROPERTY_LDAP = "ldap";
  public static final String JSON_PROPERTY_SAML = "saml";
  public static final String JSON_PROPERTY_IDP_ID = "idpId";
  public static final String JSON_PROPERTY_USER_ID = "userId";
  public static final String JSON_PROPERTY_USER_NAME = "userName";
  public static final String JSON_PROPERTY_RAW_INFORMATION = "rawInformation";
  @javax.annotation.Nullable
  private V2IDPOAuthAccessInformation oauth;
  @javax.annotation.Nullable
  private V2IDPLDAPAccessInformation ldap;
  @javax.annotation.Nullable
  private V2IDPSAMLAccessInformation saml;
  @javax.annotation.Nullable
  private String idpId;
  @javax.annotation.Nullable
  private String userId;
  @javax.annotation.Nullable
  private String userName;
  @javax.annotation.Nullable
  private Object rawInformation;

  public V2IDPInformation() {
  }

  public V2IDPInformation oauth(@javax.annotation.Nullable V2IDPOAuthAccessInformation oauth) {

    this.oauth = oauth;
    return this;
  }

  /**
   * Get oauth
   *
   * @return oauth
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OAUTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public V2IDPOAuthAccessInformation getOauth() {
    return oauth;
  }


  @JsonProperty(JSON_PROPERTY_OAUTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOauth(@javax.annotation.Nullable V2IDPOAuthAccessInformation oauth) {
    this.oauth = oauth;
  }

  public V2IDPInformation ldap(@javax.annotation.Nullable V2IDPLDAPAccessInformation ldap) {

    this.ldap = ldap;
    return this;
  }

  /**
   * Get ldap
   *
   * @return ldap
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LDAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public V2IDPLDAPAccessInformation getLdap() {
    return ldap;
  }


  @JsonProperty(JSON_PROPERTY_LDAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLdap(@javax.annotation.Nullable V2IDPLDAPAccessInformation ldap) {
    this.ldap = ldap;
  }

  public V2IDPInformation saml(@javax.annotation.Nullable V2IDPSAMLAccessInformation saml) {

    this.saml = saml;
    return this;
  }

  /**
   * Get saml
   *
   * @return saml
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SAML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public V2IDPSAMLAccessInformation getSaml() {
    return saml;
  }


  @JsonProperty(JSON_PROPERTY_SAML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSaml(@javax.annotation.Nullable V2IDPSAMLAccessInformation saml) {
    this.saml = saml;
  }

  public V2IDPInformation idpId(@javax.annotation.Nullable String idpId) {

    this.idpId = idpId;
    return this;
  }

  /**
   * ID of the identity provider
   *
   * @return idpId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IDP_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIdpId() {
    return idpId;
  }


  @JsonProperty(JSON_PROPERTY_IDP_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIdpId(@javax.annotation.Nullable String idpId) {
    this.idpId = idpId;
  }

  public V2IDPInformation userId(@javax.annotation.Nullable String userId) {

    this.userId = userId;
    return this;
  }

  /**
   * ID of the user of the identity provider
   *
   * @return userId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserId() {
    return userId;
  }


  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserId(@javax.annotation.Nullable String userId) {
    this.userId = userId;
  }

  public V2IDPInformation userName(@javax.annotation.Nullable String userName) {

    this.userName = userName;
    return this;
  }

  /**
   * username of the user of the identity provider
   *
   * @return userName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserName() {
    return userName;
  }


  @JsonProperty(JSON_PROPERTY_USER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserName(@javax.annotation.Nullable String userName) {
    this.userName = userName;
  }

  public V2IDPInformation rawInformation(@javax.annotation.Nullable Object rawInformation) {

    this.rawInformation = rawInformation;
    return this;
  }

  /**
   * complete information returned by the identity provider
   *
   * @return rawInformation
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RAW_INFORMATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getRawInformation() {
    return rawInformation;
  }


  @JsonProperty(JSON_PROPERTY_RAW_INFORMATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRawInformation(@javax.annotation.Nullable Object rawInformation) {
    this.rawInformation = rawInformation;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V2IDPInformation v2IDPInformation = (V2IDPInformation) o;
    return Objects.equals(this.oauth, v2IDPInformation.oauth) &&
      Objects.equals(this.ldap, v2IDPInformation.ldap) &&
      Objects.equals(this.saml, v2IDPInformation.saml) &&
      Objects.equals(this.idpId, v2IDPInformation.idpId) &&
      Objects.equals(this.userId, v2IDPInformation.userId) &&
      Objects.equals(this.userName, v2IDPInformation.userName) &&
      Objects.equals(this.rawInformation, v2IDPInformation.rawInformation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(oauth, ldap, saml, idpId, userId, userName, rawInformation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V2IDPInformation {\n");
    sb.append("    oauth: ").append(toIndentedString(oauth)).append("\n");
    sb.append("    ldap: ").append(toIndentedString(ldap)).append("\n");
    sb.append("    saml: ").append(toIndentedString(saml)).append("\n");
    sb.append("    idpId: ").append(toIndentedString(idpId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    rawInformation: ").append(toIndentedString(rawInformation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `oauth` to the URL query string
    if (getOauth() != null) {
      joiner.add(getOauth().toUrlQueryString(prefix + "oauth" + suffix));
    }

    // add `ldap` to the URL query string
    if (getLdap() != null) {
      joiner.add(getLdap().toUrlQueryString(prefix + "ldap" + suffix));
    }

    // add `saml` to the URL query string
    if (getSaml() != null) {
      joiner.add(getSaml().toUrlQueryString(prefix + "saml" + suffix));
    }

    // add `idpId` to the URL query string
    if (getIdpId() != null) {
      try {
        joiner.add(String.format("%sidpId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIdpId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `userId` to the URL query string
    if (getUserId() != null) {
      try {
        joiner.add(String.format("%suserId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUserId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `userName` to the URL query string
    if (getUserName() != null) {
      try {
        joiner.add(String.format("%suserName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUserName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `rawInformation` to the URL query string
    if (getRawInformation() != null) {
      try {
        joiner.add(String.format("%srawInformation%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRawInformation()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

