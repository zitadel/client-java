/*
 * Zitadel SDK
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zitadel.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.zitadel.model.SettingsServiceBetaResourceOwnerType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * SettingsServiceBetaPasswordComplexitySettings
 */
@JsonPropertyOrder({
  SettingsServiceBetaPasswordComplexitySettings.JSON_PROPERTY_MIN_LENGTH,
  SettingsServiceBetaPasswordComplexitySettings.JSON_PROPERTY_REQUIRES_UPPERCASE,
  SettingsServiceBetaPasswordComplexitySettings.JSON_PROPERTY_REQUIRES_LOWERCASE,
  SettingsServiceBetaPasswordComplexitySettings.JSON_PROPERTY_REQUIRES_NUMBER,
  SettingsServiceBetaPasswordComplexitySettings.JSON_PROPERTY_REQUIRES_SYMBOL,
  SettingsServiceBetaPasswordComplexitySettings.JSON_PROPERTY_RESOURCE_OWNER_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class SettingsServiceBetaPasswordComplexitySettings {
  public static final String JSON_PROPERTY_MIN_LENGTH = "minLength";
  @javax.annotation.Nullable
  private String minLength;

  public static final String JSON_PROPERTY_REQUIRES_UPPERCASE = "requiresUppercase";
  @javax.annotation.Nullable
  private Boolean requiresUppercase;

  public static final String JSON_PROPERTY_REQUIRES_LOWERCASE = "requiresLowercase";
  @javax.annotation.Nullable
  private Boolean requiresLowercase;

  public static final String JSON_PROPERTY_REQUIRES_NUMBER = "requiresNumber";
  @javax.annotation.Nullable
  private Boolean requiresNumber;

  public static final String JSON_PROPERTY_REQUIRES_SYMBOL = "requiresSymbol";
  @javax.annotation.Nullable
  private Boolean requiresSymbol;

  public static final String JSON_PROPERTY_RESOURCE_OWNER_TYPE = "resourceOwnerType";
  @javax.annotation.Nullable
  private SettingsServiceBetaResourceOwnerType resourceOwnerType = SettingsServiceBetaResourceOwnerType.RESOURCE_OWNER_TYPE_UNSPECIFIED;

  public SettingsServiceBetaPasswordComplexitySettings() {
  }

  public SettingsServiceBetaPasswordComplexitySettings minLength(@javax.annotation.Nullable String minLength) {
    
    this.minLength = minLength;
    return this;
  }

  /**
   * Defines the minimum length of a password.
   * @return minLength
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIN_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMinLength() {
    return minLength;
  }


  @JsonProperty(JSON_PROPERTY_MIN_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinLength(@javax.annotation.Nullable String minLength) {
    this.minLength = minLength;
  }

  public SettingsServiceBetaPasswordComplexitySettings requiresUppercase(@javax.annotation.Nullable Boolean requiresUppercase) {
    
    this.requiresUppercase = requiresUppercase;
    return this;
  }

  /**
   * defines if the password MUST contain an upper case letter
   * @return requiresUppercase
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUIRES_UPPERCASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRequiresUppercase() {
    return requiresUppercase;
  }


  @JsonProperty(JSON_PROPERTY_REQUIRES_UPPERCASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequiresUppercase(@javax.annotation.Nullable Boolean requiresUppercase) {
    this.requiresUppercase = requiresUppercase;
  }

  public SettingsServiceBetaPasswordComplexitySettings requiresLowercase(@javax.annotation.Nullable Boolean requiresLowercase) {
    
    this.requiresLowercase = requiresLowercase;
    return this;
  }

  /**
   * defines if the password MUST contain a lowercase letter
   * @return requiresLowercase
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUIRES_LOWERCASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRequiresLowercase() {
    return requiresLowercase;
  }


  @JsonProperty(JSON_PROPERTY_REQUIRES_LOWERCASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequiresLowercase(@javax.annotation.Nullable Boolean requiresLowercase) {
    this.requiresLowercase = requiresLowercase;
  }

  public SettingsServiceBetaPasswordComplexitySettings requiresNumber(@javax.annotation.Nullable Boolean requiresNumber) {
    
    this.requiresNumber = requiresNumber;
    return this;
  }

  /**
   * defines if the password MUST contain a number
   * @return requiresNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUIRES_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRequiresNumber() {
    return requiresNumber;
  }


  @JsonProperty(JSON_PROPERTY_REQUIRES_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequiresNumber(@javax.annotation.Nullable Boolean requiresNumber) {
    this.requiresNumber = requiresNumber;
  }

  public SettingsServiceBetaPasswordComplexitySettings requiresSymbol(@javax.annotation.Nullable Boolean requiresSymbol) {
    
    this.requiresSymbol = requiresSymbol;
    return this;
  }

  /**
   * defines if the password MUST contain a symbol. E.g. \&quot;$\&quot;
   * @return requiresSymbol
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUIRES_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRequiresSymbol() {
    return requiresSymbol;
  }


  @JsonProperty(JSON_PROPERTY_REQUIRES_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequiresSymbol(@javax.annotation.Nullable Boolean requiresSymbol) {
    this.requiresSymbol = requiresSymbol;
  }

  public SettingsServiceBetaPasswordComplexitySettings resourceOwnerType(@javax.annotation.Nullable SettingsServiceBetaResourceOwnerType resourceOwnerType) {
    
    this.resourceOwnerType = resourceOwnerType;
    return this;
  }

  /**
   * Get resourceOwnerType
   * @return resourceOwnerType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESOURCE_OWNER_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SettingsServiceBetaResourceOwnerType getResourceOwnerType() {
    return resourceOwnerType;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCE_OWNER_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResourceOwnerType(@javax.annotation.Nullable SettingsServiceBetaResourceOwnerType resourceOwnerType) {
    this.resourceOwnerType = resourceOwnerType;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettingsServiceBetaPasswordComplexitySettings settingsServiceBetaPasswordComplexitySettings = (SettingsServiceBetaPasswordComplexitySettings) o;
    return Objects.equals(this.minLength, settingsServiceBetaPasswordComplexitySettings.minLength) &&
        Objects.equals(this.requiresUppercase, settingsServiceBetaPasswordComplexitySettings.requiresUppercase) &&
        Objects.equals(this.requiresLowercase, settingsServiceBetaPasswordComplexitySettings.requiresLowercase) &&
        Objects.equals(this.requiresNumber, settingsServiceBetaPasswordComplexitySettings.requiresNumber) &&
        Objects.equals(this.requiresSymbol, settingsServiceBetaPasswordComplexitySettings.requiresSymbol) &&
        Objects.equals(this.resourceOwnerType, settingsServiceBetaPasswordComplexitySettings.resourceOwnerType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(minLength, requiresUppercase, requiresLowercase, requiresNumber, requiresSymbol, resourceOwnerType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettingsServiceBetaPasswordComplexitySettings {\n");
    sb.append("    minLength: ").append(toIndentedString(minLength)).append("\n");
    sb.append("    requiresUppercase: ").append(toIndentedString(requiresUppercase)).append("\n");
    sb.append("    requiresLowercase: ").append(toIndentedString(requiresLowercase)).append("\n");
    sb.append("    requiresNumber: ").append(toIndentedString(requiresNumber)).append("\n");
    sb.append("    requiresSymbol: ").append(toIndentedString(requiresSymbol)).append("\n");
    sb.append("    resourceOwnerType: ").append(toIndentedString(resourceOwnerType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `minLength` to the URL query string
    if (getMinLength() != null) {
      try {
        joiner.add(String.format("%sminLength%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMinLength()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `requiresUppercase` to the URL query string
    if (getRequiresUppercase() != null) {
      try {
        joiner.add(String.format("%srequiresUppercase%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRequiresUppercase()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `requiresLowercase` to the URL query string
    if (getRequiresLowercase() != null) {
      try {
        joiner.add(String.format("%srequiresLowercase%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRequiresLowercase()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `requiresNumber` to the URL query string
    if (getRequiresNumber() != null) {
      try {
        joiner.add(String.format("%srequiresNumber%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRequiresNumber()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `requiresSymbol` to the URL query string
    if (getRequiresSymbol() != null) {
      try {
        joiner.add(String.format("%srequiresSymbol%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRequiresSymbol()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `resourceOwnerType` to the URL query string
    if (getResourceOwnerType() != null) {
      try {
        joiner.add(String.format("%sresourceOwnerType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getResourceOwnerType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

