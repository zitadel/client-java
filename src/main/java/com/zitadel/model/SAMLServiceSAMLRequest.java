/*
 * Zitadel SDK
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zitadel.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * SAMLServiceSAMLRequest
 */
@JsonPropertyOrder({
  SAMLServiceSAMLRequest.JSON_PROPERTY_ID,
  SAMLServiceSAMLRequest.JSON_PROPERTY_CREATION_DATE,
  SAMLServiceSAMLRequest.JSON_PROPERTY_ISSUER,
  SAMLServiceSAMLRequest.JSON_PROPERTY_ASSERTION_CONSUMER_SERVICE,
  SAMLServiceSAMLRequest.JSON_PROPERTY_RELAY_STATE,
  SAMLServiceSAMLRequest.JSON_PROPERTY_BINDING
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class SAMLServiceSAMLRequest {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nullable
  private String id;

  public static final String JSON_PROPERTY_CREATION_DATE = "creationDate";
  @javax.annotation.Nullable
  private OffsetDateTime creationDate;

  public static final String JSON_PROPERTY_ISSUER = "issuer";
  @javax.annotation.Nullable
  private String issuer;

  public static final String JSON_PROPERTY_ASSERTION_CONSUMER_SERVICE = "assertionConsumerService";
  @javax.annotation.Nullable
  private String assertionConsumerService;

  public static final String JSON_PROPERTY_RELAY_STATE = "relayState";
  @javax.annotation.Nullable
  private String relayState;

  public static final String JSON_PROPERTY_BINDING = "binding";
  @javax.annotation.Nullable
  private String binding;

  public SAMLServiceSAMLRequest() {
  }

  public SAMLServiceSAMLRequest id(@javax.annotation.Nullable String id) {
    
    this.id = id;
    return this;
  }

  /**
   * ID of the SAMLRequest
   * @return id
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }

  public SAMLServiceSAMLRequest creationDate(@javax.annotation.Nullable OffsetDateTime creationDate) {
    
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Time when the SAMLRequest was created
   * @return creationDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreationDate() {
    return creationDate;
  }


  @JsonProperty(JSON_PROPERTY_CREATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreationDate(@javax.annotation.Nullable OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }

  public SAMLServiceSAMLRequest issuer(@javax.annotation.Nullable String issuer) {
    
    this.issuer = issuer;
    return this;
  }

  /**
   * SAML entityID of the application that created the SAMLRequest
   * @return issuer
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ISSUER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIssuer() {
    return issuer;
  }


  @JsonProperty(JSON_PROPERTY_ISSUER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIssuer(@javax.annotation.Nullable String issuer) {
    this.issuer = issuer;
  }

  public SAMLServiceSAMLRequest assertionConsumerService(@javax.annotation.Nullable String assertionConsumerService) {
    
    this.assertionConsumerService = assertionConsumerService;
    return this;
  }

  /**
   * URL which points back to the assertion consumer service of the application
   * @return assertionConsumerService
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ASSERTION_CONSUMER_SERVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAssertionConsumerService() {
    return assertionConsumerService;
  }


  @JsonProperty(JSON_PROPERTY_ASSERTION_CONSUMER_SERVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAssertionConsumerService(@javax.annotation.Nullable String assertionConsumerService) {
    this.assertionConsumerService = assertionConsumerService;
  }

  public SAMLServiceSAMLRequest relayState(@javax.annotation.Nullable String relayState) {
    
    this.relayState = relayState;
    return this;
  }

  /**
   * RelayState provided by the application for the request
   * @return relayState
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RELAY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRelayState() {
    return relayState;
  }


  @JsonProperty(JSON_PROPERTY_RELAY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRelayState(@javax.annotation.Nullable String relayState) {
    this.relayState = relayState;
  }

  public SAMLServiceSAMLRequest binding(@javax.annotation.Nullable String binding) {
    
    this.binding = binding;
    return this;
  }

  /**
   * Binding used by the application for the request
   * @return binding
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BINDING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBinding() {
    return binding;
  }


  @JsonProperty(JSON_PROPERTY_BINDING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBinding(@javax.annotation.Nullable String binding) {
    this.binding = binding;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SAMLServiceSAMLRequest saMLServiceSAMLRequest = (SAMLServiceSAMLRequest) o;
    return Objects.equals(this.id, saMLServiceSAMLRequest.id) &&
        Objects.equals(this.creationDate, saMLServiceSAMLRequest.creationDate) &&
        Objects.equals(this.issuer, saMLServiceSAMLRequest.issuer) &&
        Objects.equals(this.assertionConsumerService, saMLServiceSAMLRequest.assertionConsumerService) &&
        Objects.equals(this.relayState, saMLServiceSAMLRequest.relayState) &&
        Objects.equals(this.binding, saMLServiceSAMLRequest.binding);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, creationDate, issuer, assertionConsumerService, relayState, binding);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SAMLServiceSAMLRequest {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    assertionConsumerService: ").append(toIndentedString(assertionConsumerService)).append("\n");
    sb.append("    relayState: ").append(toIndentedString(relayState)).append("\n");
    sb.append("    binding: ").append(toIndentedString(binding)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `creationDate` to the URL query string
    if (getCreationDate() != null) {
      try {
        joiner.add(String.format("%screationDate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreationDate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `issuer` to the URL query string
    if (getIssuer() != null) {
      try {
        joiner.add(String.format("%sissuer%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIssuer()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `assertionConsumerService` to the URL query string
    if (getAssertionConsumerService() != null) {
      try {
        joiner.add(String.format("%sassertionConsumerService%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAssertionConsumerService()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `relayState` to the URL query string
    if (getRelayState() != null) {
      try {
        joiner.add(String.format("%srelayState%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRelayState()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `binding` to the URL query string
    if (getBinding() != null) {
      try {
        joiner.add(String.format("%sbinding%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBinding()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

