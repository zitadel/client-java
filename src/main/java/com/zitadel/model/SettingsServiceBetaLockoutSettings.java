/*
 * Zitadel SDK
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zitadel.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.zitadel.model.SettingsServiceBetaResourceOwnerType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * SettingsServiceBetaLockoutSettings
 */
@JsonPropertyOrder({
  SettingsServiceBetaLockoutSettings.JSON_PROPERTY_MAX_PASSWORD_ATTEMPTS,
  SettingsServiceBetaLockoutSettings.JSON_PROPERTY_RESOURCE_OWNER_TYPE,
  SettingsServiceBetaLockoutSettings.JSON_PROPERTY_MAX_OTP_ATTEMPTS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class SettingsServiceBetaLockoutSettings {
  public static final String JSON_PROPERTY_MAX_PASSWORD_ATTEMPTS = "maxPasswordAttempts";
  @javax.annotation.Nullable
  private String maxPasswordAttempts;

  public static final String JSON_PROPERTY_RESOURCE_OWNER_TYPE = "resourceOwnerType";
  @javax.annotation.Nullable
  private SettingsServiceBetaResourceOwnerType resourceOwnerType = SettingsServiceBetaResourceOwnerType.RESOURCE_OWNER_TYPE_UNSPECIFIED;

  public static final String JSON_PROPERTY_MAX_OTP_ATTEMPTS = "maxOtpAttempts";
  @javax.annotation.Nullable
  private String maxOtpAttempts;

  public SettingsServiceBetaLockoutSettings() {
  }

  public SettingsServiceBetaLockoutSettings maxPasswordAttempts(@javax.annotation.Nullable String maxPasswordAttempts) {
    
    this.maxPasswordAttempts = maxPasswordAttempts;
    return this;
  }

  /**
   * Maximum password check attempts before the account gets locked. Attempts are reset as soon as the password is entered correctly or the password is reset. If set to 0 the account will never be locked.
   * @return maxPasswordAttempts
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_PASSWORD_ATTEMPTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMaxPasswordAttempts() {
    return maxPasswordAttempts;
  }


  @JsonProperty(JSON_PROPERTY_MAX_PASSWORD_ATTEMPTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxPasswordAttempts(@javax.annotation.Nullable String maxPasswordAttempts) {
    this.maxPasswordAttempts = maxPasswordAttempts;
  }

  public SettingsServiceBetaLockoutSettings resourceOwnerType(@javax.annotation.Nullable SettingsServiceBetaResourceOwnerType resourceOwnerType) {
    
    this.resourceOwnerType = resourceOwnerType;
    return this;
  }

  /**
   * Get resourceOwnerType
   * @return resourceOwnerType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESOURCE_OWNER_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SettingsServiceBetaResourceOwnerType getResourceOwnerType() {
    return resourceOwnerType;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCE_OWNER_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResourceOwnerType(@javax.annotation.Nullable SettingsServiceBetaResourceOwnerType resourceOwnerType) {
    this.resourceOwnerType = resourceOwnerType;
  }

  public SettingsServiceBetaLockoutSettings maxOtpAttempts(@javax.annotation.Nullable String maxOtpAttempts) {
    
    this.maxOtpAttempts = maxOtpAttempts;
    return this;
  }

  /**
   * Maximum failed attempts for a single OTP type (TOTP, SMS, Email) before the account gets locked. Attempts are reset as soon as the OTP is entered correctly. If set to 0 the account will never be locked.
   * @return maxOtpAttempts
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_OTP_ATTEMPTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMaxOtpAttempts() {
    return maxOtpAttempts;
  }


  @JsonProperty(JSON_PROPERTY_MAX_OTP_ATTEMPTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxOtpAttempts(@javax.annotation.Nullable String maxOtpAttempts) {
    this.maxOtpAttempts = maxOtpAttempts;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettingsServiceBetaLockoutSettings settingsServiceBetaLockoutSettings = (SettingsServiceBetaLockoutSettings) o;
    return Objects.equals(this.maxPasswordAttempts, settingsServiceBetaLockoutSettings.maxPasswordAttempts) &&
        Objects.equals(this.resourceOwnerType, settingsServiceBetaLockoutSettings.resourceOwnerType) &&
        Objects.equals(this.maxOtpAttempts, settingsServiceBetaLockoutSettings.maxOtpAttempts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxPasswordAttempts, resourceOwnerType, maxOtpAttempts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettingsServiceBetaLockoutSettings {\n");
    sb.append("    maxPasswordAttempts: ").append(toIndentedString(maxPasswordAttempts)).append("\n");
    sb.append("    resourceOwnerType: ").append(toIndentedString(resourceOwnerType)).append("\n");
    sb.append("    maxOtpAttempts: ").append(toIndentedString(maxOtpAttempts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `maxPasswordAttempts` to the URL query string
    if (getMaxPasswordAttempts() != null) {
      try {
        joiner.add(String.format("%smaxPasswordAttempts%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxPasswordAttempts()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `resourceOwnerType` to the URL query string
    if (getResourceOwnerType() != null) {
      try {
        joiner.add(String.format("%sresourceOwnerType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getResourceOwnerType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `maxOtpAttempts` to the URL query string
    if (getMaxOtpAttempts() != null) {
      try {
        joiner.add(String.format("%smaxOtpAttempts%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxOtpAttempts()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

