/*
 * Zitadel SDK
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zitadel.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * ActionServiceBetaPaginationRequest
 */
@JsonPropertyOrder({
  ActionServiceBetaPaginationRequest.JSON_PROPERTY_OFFSET,
  ActionServiceBetaPaginationRequest.JSON_PROPERTY_LIMIT,
  ActionServiceBetaPaginationRequest.JSON_PROPERTY_ASC
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class ActionServiceBetaPaginationRequest {
  public static final String JSON_PROPERTY_OFFSET = "offset";
  @javax.annotation.Nullable
  private String offset;

  public static final String JSON_PROPERTY_LIMIT = "limit";
  @javax.annotation.Nullable
  private Long limit;

  public static final String JSON_PROPERTY_ASC = "asc";
  @javax.annotation.Nullable
  private Boolean asc;

  public ActionServiceBetaPaginationRequest() {
  }

  public ActionServiceBetaPaginationRequest offset(@javax.annotation.Nullable String offset) {
    
    this.offset = offset;
    return this;
  }

  /**
   * Starting point for retrieval, in combination of offset used to query a set list of objects.
   * @return offset
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOffset() {
    return offset;
  }


  @JsonProperty(JSON_PROPERTY_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOffset(@javax.annotation.Nullable String offset) {
    this.offset = offset;
  }

  public ActionServiceBetaPaginationRequest limit(@javax.annotation.Nullable Long limit) {
    
    this.limit = limit;
    return this;
  }

  /**
   * limit is the maximum amount of objects returned. The default is set to 100 with a maximum of 1000 in the runtime configuration. If the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken.
   * @return limit
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getLimit() {
    return limit;
  }


  @JsonProperty(JSON_PROPERTY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLimit(@javax.annotation.Nullable Long limit) {
    this.limit = limit;
  }

  public ActionServiceBetaPaginationRequest asc(@javax.annotation.Nullable Boolean asc) {
    
    this.asc = asc;
    return this;
  }

  /**
   * Asc is the sorting order. If true the list is sorted ascending, if false the list is sorted descending. The default is descending.
   * @return asc
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ASC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAsc() {
    return asc;
  }


  @JsonProperty(JSON_PROPERTY_ASC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAsc(@javax.annotation.Nullable Boolean asc) {
    this.asc = asc;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActionServiceBetaPaginationRequest actionServiceBetaPaginationRequest = (ActionServiceBetaPaginationRequest) o;
    return Objects.equals(this.offset, actionServiceBetaPaginationRequest.offset) &&
        Objects.equals(this.limit, actionServiceBetaPaginationRequest.limit) &&
        Objects.equals(this.asc, actionServiceBetaPaginationRequest.asc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(offset, limit, asc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActionServiceBetaPaginationRequest {\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    asc: ").append(toIndentedString(asc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `offset` to the URL query string
    if (getOffset() != null) {
      try {
        joiner.add(String.format("%soffset%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOffset()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `limit` to the URL query string
    if (getLimit() != null) {
      try {
        joiner.add(String.format("%slimit%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLimit()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `asc` to the URL query string
    if (getAsc() != null) {
      try {
        joiner.add(String.format("%sasc%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAsc()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

