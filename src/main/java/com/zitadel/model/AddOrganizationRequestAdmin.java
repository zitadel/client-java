/*
 * Zitadel SDK
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zitadel.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/**
 * AddOrganizationRequestAdmin
 */
@JsonPropertyOrder({
  AddOrganizationRequestAdmin.JSON_PROPERTY_USER_ID,
  AddOrganizationRequestAdmin.JSON_PROPERTY_HUMAN,
  AddOrganizationRequestAdmin.JSON_PROPERTY_ROLES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class AddOrganizationRequestAdmin {
  public static final String JSON_PROPERTY_USER_ID = "userId";
  public static final String JSON_PROPERTY_HUMAN = "human";
  public static final String JSON_PROPERTY_ROLES = "roles";
  @javax.annotation.Nullable
  private String userId;
  @javax.annotation.Nullable
  private V2AddHumanUserRequest human;
  @javax.annotation.Nullable
  private List<String> roles = new ArrayList<>();

  public AddOrganizationRequestAdmin() {
  }

  public AddOrganizationRequestAdmin userId(@javax.annotation.Nullable String userId) {

    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   *
   * @return userId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserId() {
    return userId;
  }


  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserId(@javax.annotation.Nullable String userId) {
    this.userId = userId;
  }

  public AddOrganizationRequestAdmin human(@javax.annotation.Nullable V2AddHumanUserRequest human) {

    this.human = human;
    return this;
  }

  /**
   * Get human
   *
   * @return human
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HUMAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public V2AddHumanUserRequest getHuman() {
    return human;
  }


  @JsonProperty(JSON_PROPERTY_HUMAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHuman(@javax.annotation.Nullable V2AddHumanUserRequest human) {
    this.human = human;
  }

  public AddOrganizationRequestAdmin roles(@javax.annotation.Nullable List<String> roles) {

    this.roles = roles;
    return this;
  }

  public AddOrganizationRequestAdmin addRolesItem(String rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
   * Get roles
   *
   * @return roles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getRoles() {
    return roles;
  }


  @JsonProperty(JSON_PROPERTY_ROLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRoles(@javax.annotation.Nullable List<String> roles) {
    this.roles = roles;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddOrganizationRequestAdmin addOrganizationRequestAdmin = (AddOrganizationRequestAdmin) o;
    return Objects.equals(this.userId, addOrganizationRequestAdmin.userId) &&
      Objects.equals(this.human, addOrganizationRequestAdmin.human) &&
      Objects.equals(this.roles, addOrganizationRequestAdmin.roles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userId, human, roles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddOrganizationRequestAdmin {\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    human: ").append(toIndentedString(human)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `userId` to the URL query string
    if (getUserId() != null) {
      try {
        joiner.add(String.format("%suserId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUserId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `human` to the URL query string
    if (getHuman() != null) {
      joiner.add(getHuman().toUrlQueryString(prefix + "human" + suffix));
    }

    // add `roles` to the URL query string
    if (getRoles() != null) {
      for (int i = 0; i < getRoles().size(); i++) {
        try {
          joiner.add(String.format("%sroles%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getRoles().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    return joiner.toString();
  }

}

