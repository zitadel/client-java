/*
 * merged spec
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zitadel.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.zitadel.model.V2ResourceOwnerType;
import com.zitadel.model.V2Theme;
import com.zitadel.model.V2ThemeMode;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * V2BrandingSettings
 */
@JsonPropertyOrder({
  V2BrandingSettings.JSON_PROPERTY_LIGHT_THEME,
  V2BrandingSettings.JSON_PROPERTY_DARK_THEME,
  V2BrandingSettings.JSON_PROPERTY_FONT_URL,
  V2BrandingSettings.JSON_PROPERTY_HIDE_LOGIN_NAME_SUFFIX,
  V2BrandingSettings.JSON_PROPERTY_DISABLE_WATERMARK,
  V2BrandingSettings.JSON_PROPERTY_RESOURCE_OWNER_TYPE,
  V2BrandingSettings.JSON_PROPERTY_THEME_MODE
})
@JsonTypeName("v2BrandingSettings")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class V2BrandingSettings {
  public static final String JSON_PROPERTY_LIGHT_THEME = "lightTheme";
  @javax.annotation.Nullable
  private V2Theme lightTheme;

  public static final String JSON_PROPERTY_DARK_THEME = "darkTheme";
  @javax.annotation.Nullable
  private V2Theme darkTheme;

  public static final String JSON_PROPERTY_FONT_URL = "fontUrl";
  @javax.annotation.Nullable
  private String fontUrl;

  public static final String JSON_PROPERTY_HIDE_LOGIN_NAME_SUFFIX = "hideLoginNameSuffix";
  @javax.annotation.Nullable
  private Boolean hideLoginNameSuffix;

  public static final String JSON_PROPERTY_DISABLE_WATERMARK = "disableWatermark";
  @javax.annotation.Nullable
  private Boolean disableWatermark;

  public static final String JSON_PROPERTY_RESOURCE_OWNER_TYPE = "resourceOwnerType";
  @javax.annotation.Nullable
  private V2ResourceOwnerType resourceOwnerType = V2ResourceOwnerType.RESOURCE_OWNER_TYPE_UNSPECIFIED;

  public static final String JSON_PROPERTY_THEME_MODE = "themeMode";
  @javax.annotation.Nullable
  private V2ThemeMode themeMode = V2ThemeMode.THEME_MODE_UNSPECIFIED;

  public V2BrandingSettings() {
  }

  public V2BrandingSettings lightTheme(@javax.annotation.Nullable V2Theme lightTheme) {
    
    this.lightTheme = lightTheme;
    return this;
  }

  /**
   * Get lightTheme
   * @return lightTheme
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIGHT_THEME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public V2Theme getLightTheme() {
    return lightTheme;
  }


  @JsonProperty(JSON_PROPERTY_LIGHT_THEME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLightTheme(@javax.annotation.Nullable V2Theme lightTheme) {
    this.lightTheme = lightTheme;
  }

  public V2BrandingSettings darkTheme(@javax.annotation.Nullable V2Theme darkTheme) {
    
    this.darkTheme = darkTheme;
    return this;
  }

  /**
   * Get darkTheme
   * @return darkTheme
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DARK_THEME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public V2Theme getDarkTheme() {
    return darkTheme;
  }


  @JsonProperty(JSON_PROPERTY_DARK_THEME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDarkTheme(@javax.annotation.Nullable V2Theme darkTheme) {
    this.darkTheme = darkTheme;
  }

  public V2BrandingSettings fontUrl(@javax.annotation.Nullable String fontUrl) {
    
    this.fontUrl = fontUrl;
    return this;
  }

  /**
   * url to the font used
   * @return fontUrl
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FONT_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFontUrl() {
    return fontUrl;
  }


  @JsonProperty(JSON_PROPERTY_FONT_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFontUrl(@javax.annotation.Nullable String fontUrl) {
    this.fontUrl = fontUrl;
  }

  public V2BrandingSettings hideLoginNameSuffix(@javax.annotation.Nullable Boolean hideLoginNameSuffix) {
    
    this.hideLoginNameSuffix = hideLoginNameSuffix;
    return this;
  }

  /**
   * hides the org suffix on the login form if the scope \&quot;urn:zitadel:iam:org:domain:primary:{domainname}\&quot; is set
   * @return hideLoginNameSuffix
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HIDE_LOGIN_NAME_SUFFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHideLoginNameSuffix() {
    return hideLoginNameSuffix;
  }


  @JsonProperty(JSON_PROPERTY_HIDE_LOGIN_NAME_SUFFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHideLoginNameSuffix(@javax.annotation.Nullable Boolean hideLoginNameSuffix) {
    this.hideLoginNameSuffix = hideLoginNameSuffix;
  }

  public V2BrandingSettings disableWatermark(@javax.annotation.Nullable Boolean disableWatermark) {
    
    this.disableWatermark = disableWatermark;
    return this;
  }

  /**
   * boolean to disable the watermark
   * @return disableWatermark
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISABLE_WATERMARK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDisableWatermark() {
    return disableWatermark;
  }


  @JsonProperty(JSON_PROPERTY_DISABLE_WATERMARK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisableWatermark(@javax.annotation.Nullable Boolean disableWatermark) {
    this.disableWatermark = disableWatermark;
  }

  public V2BrandingSettings resourceOwnerType(@javax.annotation.Nullable V2ResourceOwnerType resourceOwnerType) {
    
    this.resourceOwnerType = resourceOwnerType;
    return this;
  }

  /**
   * Get resourceOwnerType
   * @return resourceOwnerType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESOURCE_OWNER_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public V2ResourceOwnerType getResourceOwnerType() {
    return resourceOwnerType;
  }


  @JsonProperty(JSON_PROPERTY_RESOURCE_OWNER_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResourceOwnerType(@javax.annotation.Nullable V2ResourceOwnerType resourceOwnerType) {
    this.resourceOwnerType = resourceOwnerType;
  }

  public V2BrandingSettings themeMode(@javax.annotation.Nullable V2ThemeMode themeMode) {
    
    this.themeMode = themeMode;
    return this;
  }

  /**
   * Get themeMode
   * @return themeMode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THEME_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public V2ThemeMode getThemeMode() {
    return themeMode;
  }


  @JsonProperty(JSON_PROPERTY_THEME_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThemeMode(@javax.annotation.Nullable V2ThemeMode themeMode) {
    this.themeMode = themeMode;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V2BrandingSettings v2BrandingSettings = (V2BrandingSettings) o;
    return Objects.equals(this.lightTheme, v2BrandingSettings.lightTheme) &&
        Objects.equals(this.darkTheme, v2BrandingSettings.darkTheme) &&
        Objects.equals(this.fontUrl, v2BrandingSettings.fontUrl) &&
        Objects.equals(this.hideLoginNameSuffix, v2BrandingSettings.hideLoginNameSuffix) &&
        Objects.equals(this.disableWatermark, v2BrandingSettings.disableWatermark) &&
        Objects.equals(this.resourceOwnerType, v2BrandingSettings.resourceOwnerType) &&
        Objects.equals(this.themeMode, v2BrandingSettings.themeMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lightTheme, darkTheme, fontUrl, hideLoginNameSuffix, disableWatermark, resourceOwnerType, themeMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V2BrandingSettings {\n");
    sb.append("    lightTheme: ").append(toIndentedString(lightTheme)).append("\n");
    sb.append("    darkTheme: ").append(toIndentedString(darkTheme)).append("\n");
    sb.append("    fontUrl: ").append(toIndentedString(fontUrl)).append("\n");
    sb.append("    hideLoginNameSuffix: ").append(toIndentedString(hideLoginNameSuffix)).append("\n");
    sb.append("    disableWatermark: ").append(toIndentedString(disableWatermark)).append("\n");
    sb.append("    resourceOwnerType: ").append(toIndentedString(resourceOwnerType)).append("\n");
    sb.append("    themeMode: ").append(toIndentedString(themeMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `lightTheme` to the URL query string
    if (getLightTheme() != null) {
      joiner.add(getLightTheme().toUrlQueryString(prefix + "lightTheme" + suffix));
    }

    // add `darkTheme` to the URL query string
    if (getDarkTheme() != null) {
      joiner.add(getDarkTheme().toUrlQueryString(prefix + "darkTheme" + suffix));
    }

    // add `fontUrl` to the URL query string
    if (getFontUrl() != null) {
      try {
        joiner.add(String.format("%sfontUrl%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFontUrl()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `hideLoginNameSuffix` to the URL query string
    if (getHideLoginNameSuffix() != null) {
      try {
        joiner.add(String.format("%shideLoginNameSuffix%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHideLoginNameSuffix()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `disableWatermark` to the URL query string
    if (getDisableWatermark() != null) {
      try {
        joiner.add(String.format("%sdisableWatermark%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDisableWatermark()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `resourceOwnerType` to the URL query string
    if (getResourceOwnerType() != null) {
      try {
        joiner.add(String.format("%sresourceOwnerType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getResourceOwnerType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `themeMode` to the URL query string
    if (getThemeMode() != null) {
      try {
        joiner.add(String.format("%sthemeMode%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getThemeMode()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

