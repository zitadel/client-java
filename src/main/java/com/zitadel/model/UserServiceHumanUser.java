/*
 * Zitadel SDK
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zitadel.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.zitadel.model.UserServiceHumanEmail;
import com.zitadel.model.UserServiceHumanPhone;
import com.zitadel.model.UserServiceHumanProfile;
import com.zitadel.model.UserServiceUserState;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * UserServiceHumanUser
 */
@JsonPropertyOrder({
  UserServiceHumanUser.JSON_PROPERTY_USER_ID,
  UserServiceHumanUser.JSON_PROPERTY_STATE,
  UserServiceHumanUser.JSON_PROPERTY_USERNAME,
  UserServiceHumanUser.JSON_PROPERTY_LOGIN_NAMES,
  UserServiceHumanUser.JSON_PROPERTY_PREFERRED_LOGIN_NAME,
  UserServiceHumanUser.JSON_PROPERTY_PROFILE,
  UserServiceHumanUser.JSON_PROPERTY_EMAIL,
  UserServiceHumanUser.JSON_PROPERTY_PHONE,
  UserServiceHumanUser.JSON_PROPERTY_PASSWORD_CHANGE_REQUIRED,
  UserServiceHumanUser.JSON_PROPERTY_PASSWORD_CHANGED,
  UserServiceHumanUser.JSON_PROPERTY_MFA_INIT_SKIPPED
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class UserServiceHumanUser {
  public static final String JSON_PROPERTY_USER_ID = "userId";
  @javax.annotation.Nullable
  private String userId;

  public static final String JSON_PROPERTY_STATE = "state";
  @javax.annotation.Nullable
  private UserServiceUserState state = UserServiceUserState.USER_STATE_UNSPECIFIED;

  public static final String JSON_PROPERTY_USERNAME = "username";
  @javax.annotation.Nullable
  private String username;

  public static final String JSON_PROPERTY_LOGIN_NAMES = "loginNames";
  @javax.annotation.Nullable
  private List<String> loginNames = new ArrayList<>();

  public static final String JSON_PROPERTY_PREFERRED_LOGIN_NAME = "preferredLoginName";
  @javax.annotation.Nullable
  private String preferredLoginName;

  public static final String JSON_PROPERTY_PROFILE = "profile";
  @javax.annotation.Nullable
  private UserServiceHumanProfile profile;

  public static final String JSON_PROPERTY_EMAIL = "email";
  @javax.annotation.Nullable
  private UserServiceHumanEmail email;

  public static final String JSON_PROPERTY_PHONE = "phone";
  @javax.annotation.Nullable
  private UserServiceHumanPhone phone;

  public static final String JSON_PROPERTY_PASSWORD_CHANGE_REQUIRED = "passwordChangeRequired";
  @javax.annotation.Nullable
  private Boolean passwordChangeRequired;

  public static final String JSON_PROPERTY_PASSWORD_CHANGED = "passwordChanged";
  @javax.annotation.Nullable
  private OffsetDateTime passwordChanged;

  public static final String JSON_PROPERTY_MFA_INIT_SKIPPED = "mfaInitSkipped";
  @javax.annotation.Nullable
  private OffsetDateTime mfaInitSkipped;

  public UserServiceHumanUser() {
  }

  public UserServiceHumanUser userId(@javax.annotation.Nullable String userId) {
    
    this.userId = userId;
    return this;
  }

  /**
   * Unique identifier of the user.
   * @return userId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserId() {
    return userId;
  }


  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserId(@javax.annotation.Nullable String userId) {
    this.userId = userId;
  }

  public UserServiceHumanUser state(@javax.annotation.Nullable UserServiceUserState state) {
    
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UserServiceUserState getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setState(@javax.annotation.Nullable UserServiceUserState state) {
    this.state = state;
  }

  public UserServiceHumanUser username(@javax.annotation.Nullable String username) {
    
    this.username = username;
    return this;
  }

  /**
   * Username of the user, which can be globally unique or unique on organization level.
   * @return username
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUsername() {
    return username;
  }


  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsername(@javax.annotation.Nullable String username) {
    this.username = username;
  }

  public UserServiceHumanUser loginNames(@javax.annotation.Nullable List<String> loginNames) {
    
    this.loginNames = loginNames;
    return this;
  }

  public UserServiceHumanUser addLoginNamesItem(String loginNamesItem) {
    if (this.loginNames == null) {
      this.loginNames = new ArrayList<>();
    }
    this.loginNames.add(loginNamesItem);
    return this;
  }

  /**
   * Possible usable login names for the user.
   * @return loginNames
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOGIN_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getLoginNames() {
    return loginNames;
  }


  @JsonProperty(JSON_PROPERTY_LOGIN_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLoginNames(@javax.annotation.Nullable List<String> loginNames) {
    this.loginNames = loginNames;
  }

  public UserServiceHumanUser preferredLoginName(@javax.annotation.Nullable String preferredLoginName) {
    
    this.preferredLoginName = preferredLoginName;
    return this;
  }

  /**
   * Preferred login name of the user.
   * @return preferredLoginName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREFERRED_LOGIN_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPreferredLoginName() {
    return preferredLoginName;
  }


  @JsonProperty(JSON_PROPERTY_PREFERRED_LOGIN_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreferredLoginName(@javax.annotation.Nullable String preferredLoginName) {
    this.preferredLoginName = preferredLoginName;
  }

  public UserServiceHumanUser profile(@javax.annotation.Nullable UserServiceHumanProfile profile) {
    
    this.profile = profile;
    return this;
  }

  /**
   * Get profile
   * @return profile
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROFILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UserServiceHumanProfile getProfile() {
    return profile;
  }


  @JsonProperty(JSON_PROPERTY_PROFILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProfile(@javax.annotation.Nullable UserServiceHumanProfile profile) {
    this.profile = profile;
  }

  public UserServiceHumanUser email(@javax.annotation.Nullable UserServiceHumanEmail email) {
    
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UserServiceHumanEmail getEmail() {
    return email;
  }


  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmail(@javax.annotation.Nullable UserServiceHumanEmail email) {
    this.email = email;
  }

  public UserServiceHumanUser phone(@javax.annotation.Nullable UserServiceHumanPhone phone) {
    
    this.phone = phone;
    return this;
  }

  /**
   * Get phone
   * @return phone
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PHONE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UserServiceHumanPhone getPhone() {
    return phone;
  }


  @JsonProperty(JSON_PROPERTY_PHONE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPhone(@javax.annotation.Nullable UserServiceHumanPhone phone) {
    this.phone = phone;
  }

  public UserServiceHumanUser passwordChangeRequired(@javax.annotation.Nullable Boolean passwordChangeRequired) {
    
    this.passwordChangeRequired = passwordChangeRequired;
    return this;
  }

  /**
   * User is required to change the used password on the next login.
   * @return passwordChangeRequired
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PASSWORD_CHANGE_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPasswordChangeRequired() {
    return passwordChangeRequired;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD_CHANGE_REQUIRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPasswordChangeRequired(@javax.annotation.Nullable Boolean passwordChangeRequired) {
    this.passwordChangeRequired = passwordChangeRequired;
  }

  public UserServiceHumanUser passwordChanged(@javax.annotation.Nullable OffsetDateTime passwordChanged) {
    
    this.passwordChanged = passwordChanged;
    return this;
  }

  /**
   * The time the user last changed their password.
   * @return passwordChanged
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PASSWORD_CHANGED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getPasswordChanged() {
    return passwordChanged;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD_CHANGED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPasswordChanged(@javax.annotation.Nullable OffsetDateTime passwordChanged) {
    this.passwordChanged = passwordChanged;
  }

  public UserServiceHumanUser mfaInitSkipped(@javax.annotation.Nullable OffsetDateTime mfaInitSkipped) {
    
    this.mfaInitSkipped = mfaInitSkipped;
    return this;
  }

  /**
   * The time the user last skipped MFA initialization.
   * @return mfaInitSkipped
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MFA_INIT_SKIPPED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getMfaInitSkipped() {
    return mfaInitSkipped;
  }


  @JsonProperty(JSON_PROPERTY_MFA_INIT_SKIPPED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMfaInitSkipped(@javax.annotation.Nullable OffsetDateTime mfaInitSkipped) {
    this.mfaInitSkipped = mfaInitSkipped;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserServiceHumanUser userServiceHumanUser = (UserServiceHumanUser) o;
    return Objects.equals(this.userId, userServiceHumanUser.userId) &&
        Objects.equals(this.state, userServiceHumanUser.state) &&
        Objects.equals(this.username, userServiceHumanUser.username) &&
        Objects.equals(this.loginNames, userServiceHumanUser.loginNames) &&
        Objects.equals(this.preferredLoginName, userServiceHumanUser.preferredLoginName) &&
        Objects.equals(this.profile, userServiceHumanUser.profile) &&
        Objects.equals(this.email, userServiceHumanUser.email) &&
        Objects.equals(this.phone, userServiceHumanUser.phone) &&
        Objects.equals(this.passwordChangeRequired, userServiceHumanUser.passwordChangeRequired) &&
        Objects.equals(this.passwordChanged, userServiceHumanUser.passwordChanged) &&
        Objects.equals(this.mfaInitSkipped, userServiceHumanUser.mfaInitSkipped);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userId, state, username, loginNames, preferredLoginName, profile, email, phone, passwordChangeRequired, passwordChanged, mfaInitSkipped);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserServiceHumanUser {\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    loginNames: ").append(toIndentedString(loginNames)).append("\n");
    sb.append("    preferredLoginName: ").append(toIndentedString(preferredLoginName)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    passwordChangeRequired: ").append(toIndentedString(passwordChangeRequired)).append("\n");
    sb.append("    passwordChanged: ").append(toIndentedString(passwordChanged)).append("\n");
    sb.append("    mfaInitSkipped: ").append(toIndentedString(mfaInitSkipped)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `userId` to the URL query string
    if (getUserId() != null) {
      try {
        joiner.add(String.format("%suserId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUserId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `state` to the URL query string
    if (getState() != null) {
      try {
        joiner.add(String.format("%sstate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getState()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `username` to the URL query string
    if (getUsername() != null) {
      try {
        joiner.add(String.format("%susername%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUsername()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `loginNames` to the URL query string
    if (getLoginNames() != null) {
      for (int i = 0; i < getLoginNames().size(); i++) {
        try {
          joiner.add(String.format("%sloginNames%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getLoginNames().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `preferredLoginName` to the URL query string
    if (getPreferredLoginName() != null) {
      try {
        joiner.add(String.format("%spreferredLoginName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPreferredLoginName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `profile` to the URL query string
    if (getProfile() != null) {
      joiner.add(getProfile().toUrlQueryString(prefix + "profile" + suffix));
    }

    // add `email` to the URL query string
    if (getEmail() != null) {
      joiner.add(getEmail().toUrlQueryString(prefix + "email" + suffix));
    }

    // add `phone` to the URL query string
    if (getPhone() != null) {
      joiner.add(getPhone().toUrlQueryString(prefix + "phone" + suffix));
    }

    // add `passwordChangeRequired` to the URL query string
    if (getPasswordChangeRequired() != null) {
      try {
        joiner.add(String.format("%spasswordChangeRequired%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPasswordChangeRequired()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `passwordChanged` to the URL query string
    if (getPasswordChanged() != null) {
      try {
        joiner.add(String.format("%spasswordChanged%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPasswordChanged()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `mfaInitSkipped` to the URL query string
    if (getMfaInitSkipped() != null) {
      try {
        joiner.add(String.format("%smfaInitSkipped%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMfaInitSkipped()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

