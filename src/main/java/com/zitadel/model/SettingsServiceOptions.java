/*
 * Zitadel SDK
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zitadel.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.zitadel.model.SettingsServiceAutoLinkingOption;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * SettingsServiceOptions
 */
@JsonPropertyOrder({
  SettingsServiceOptions.JSON_PROPERTY_IS_LINKING_ALLOWED,
  SettingsServiceOptions.JSON_PROPERTY_IS_CREATION_ALLOWED,
  SettingsServiceOptions.JSON_PROPERTY_IS_AUTO_CREATION,
  SettingsServiceOptions.JSON_PROPERTY_IS_AUTO_UPDATE,
  SettingsServiceOptions.JSON_PROPERTY_AUTO_LINKING
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class SettingsServiceOptions {
  public static final String JSON_PROPERTY_IS_LINKING_ALLOWED = "isLinkingAllowed";
  @javax.annotation.Nullable
  private Boolean isLinkingAllowed;

  public static final String JSON_PROPERTY_IS_CREATION_ALLOWED = "isCreationAllowed";
  @javax.annotation.Nullable
  private Boolean isCreationAllowed;

  public static final String JSON_PROPERTY_IS_AUTO_CREATION = "isAutoCreation";
  @javax.annotation.Nullable
  private Boolean isAutoCreation;

  public static final String JSON_PROPERTY_IS_AUTO_UPDATE = "isAutoUpdate";
  @javax.annotation.Nullable
  private Boolean isAutoUpdate;

  public static final String JSON_PROPERTY_AUTO_LINKING = "autoLinking";
  @javax.annotation.Nullable
  private SettingsServiceAutoLinkingOption autoLinking = SettingsServiceAutoLinkingOption.AUTO_LINKING_OPTION_UNSPECIFIED;

  public SettingsServiceOptions() {
  }

  public SettingsServiceOptions isLinkingAllowed(@javax.annotation.Nullable Boolean isLinkingAllowed) {
    
    this.isLinkingAllowed = isLinkingAllowed;
    return this;
  }

  /**
   * Enable if users should be able to link an existing ZITADEL user with an external account.
   * @return isLinkingAllowed
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_LINKING_ALLOWED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsLinkingAllowed() {
    return isLinkingAllowed;
  }


  @JsonProperty(JSON_PROPERTY_IS_LINKING_ALLOWED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsLinkingAllowed(@javax.annotation.Nullable Boolean isLinkingAllowed) {
    this.isLinkingAllowed = isLinkingAllowed;
  }

  public SettingsServiceOptions isCreationAllowed(@javax.annotation.Nullable Boolean isCreationAllowed) {
    
    this.isCreationAllowed = isCreationAllowed;
    return this;
  }

  /**
   * Enable if users should be able to create a new account in ZITADEL when using an external account.
   * @return isCreationAllowed
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_CREATION_ALLOWED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsCreationAllowed() {
    return isCreationAllowed;
  }


  @JsonProperty(JSON_PROPERTY_IS_CREATION_ALLOWED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsCreationAllowed(@javax.annotation.Nullable Boolean isCreationAllowed) {
    this.isCreationAllowed = isCreationAllowed;
  }

  public SettingsServiceOptions isAutoCreation(@javax.annotation.Nullable Boolean isAutoCreation) {
    
    this.isAutoCreation = isAutoCreation;
    return this;
  }

  /**
   * Enable if a new account in ZITADEL should be created automatically when login with an external account.
   * @return isAutoCreation
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_AUTO_CREATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsAutoCreation() {
    return isAutoCreation;
  }


  @JsonProperty(JSON_PROPERTY_IS_AUTO_CREATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsAutoCreation(@javax.annotation.Nullable Boolean isAutoCreation) {
    this.isAutoCreation = isAutoCreation;
  }

  public SettingsServiceOptions isAutoUpdate(@javax.annotation.Nullable Boolean isAutoUpdate) {
    
    this.isAutoUpdate = isAutoUpdate;
    return this;
  }

  /**
   * Enable if a the ZITADEL account fields should be updated automatically on each login.
   * @return isAutoUpdate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_AUTO_UPDATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsAutoUpdate() {
    return isAutoUpdate;
  }


  @JsonProperty(JSON_PROPERTY_IS_AUTO_UPDATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsAutoUpdate(@javax.annotation.Nullable Boolean isAutoUpdate) {
    this.isAutoUpdate = isAutoUpdate;
  }

  public SettingsServiceOptions autoLinking(@javax.annotation.Nullable SettingsServiceAutoLinkingOption autoLinking) {
    
    this.autoLinking = autoLinking;
    return this;
  }

  /**
   * Get autoLinking
   * @return autoLinking
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTO_LINKING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SettingsServiceAutoLinkingOption getAutoLinking() {
    return autoLinking;
  }


  @JsonProperty(JSON_PROPERTY_AUTO_LINKING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAutoLinking(@javax.annotation.Nullable SettingsServiceAutoLinkingOption autoLinking) {
    this.autoLinking = autoLinking;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettingsServiceOptions settingsServiceOptions = (SettingsServiceOptions) o;
    return Objects.equals(this.isLinkingAllowed, settingsServiceOptions.isLinkingAllowed) &&
        Objects.equals(this.isCreationAllowed, settingsServiceOptions.isCreationAllowed) &&
        Objects.equals(this.isAutoCreation, settingsServiceOptions.isAutoCreation) &&
        Objects.equals(this.isAutoUpdate, settingsServiceOptions.isAutoUpdate) &&
        Objects.equals(this.autoLinking, settingsServiceOptions.autoLinking);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isLinkingAllowed, isCreationAllowed, isAutoCreation, isAutoUpdate, autoLinking);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettingsServiceOptions {\n");
    sb.append("    isLinkingAllowed: ").append(toIndentedString(isLinkingAllowed)).append("\n");
    sb.append("    isCreationAllowed: ").append(toIndentedString(isCreationAllowed)).append("\n");
    sb.append("    isAutoCreation: ").append(toIndentedString(isAutoCreation)).append("\n");
    sb.append("    isAutoUpdate: ").append(toIndentedString(isAutoUpdate)).append("\n");
    sb.append("    autoLinking: ").append(toIndentedString(autoLinking)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `isLinkingAllowed` to the URL query string
    if (getIsLinkingAllowed() != null) {
      try {
        joiner.add(String.format("%sisLinkingAllowed%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsLinkingAllowed()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `isCreationAllowed` to the URL query string
    if (getIsCreationAllowed() != null) {
      try {
        joiner.add(String.format("%sisCreationAllowed%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsCreationAllowed()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `isAutoCreation` to the URL query string
    if (getIsAutoCreation() != null) {
      try {
        joiner.add(String.format("%sisAutoCreation%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsAutoCreation()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `isAutoUpdate` to the URL query string
    if (getIsAutoUpdate() != null) {
      try {
        joiner.add(String.format("%sisAutoUpdate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsAutoUpdate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `autoLinking` to the URL query string
    if (getAutoLinking() != null) {
      try {
        joiner.add(String.format("%sautoLinking%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAutoLinking()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

