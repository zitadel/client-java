/*
 * Zitadel SDK
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zitadel.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * SettingsServiceTheme
 */
@JsonPropertyOrder({
  SettingsServiceTheme.JSON_PROPERTY_PRIMARY_COLOR,
  SettingsServiceTheme.JSON_PROPERTY_BACKGROUND_COLOR,
  SettingsServiceTheme.JSON_PROPERTY_WARN_COLOR,
  SettingsServiceTheme.JSON_PROPERTY_FONT_COLOR,
  SettingsServiceTheme.JSON_PROPERTY_LOGO_URL,
  SettingsServiceTheme.JSON_PROPERTY_ICON_URL
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class SettingsServiceTheme {
  public static final String JSON_PROPERTY_PRIMARY_COLOR = "primaryColor";
  @javax.annotation.Nullable
  private String primaryColor;

  public static final String JSON_PROPERTY_BACKGROUND_COLOR = "backgroundColor";
  @javax.annotation.Nullable
  private String backgroundColor;

  public static final String JSON_PROPERTY_WARN_COLOR = "warnColor";
  @javax.annotation.Nullable
  private String warnColor;

  public static final String JSON_PROPERTY_FONT_COLOR = "fontColor";
  @javax.annotation.Nullable
  private String fontColor;

  public static final String JSON_PROPERTY_LOGO_URL = "logoUrl";
  @javax.annotation.Nullable
  private String logoUrl;

  public static final String JSON_PROPERTY_ICON_URL = "iconUrl";
  @javax.annotation.Nullable
  private String iconUrl;

  public SettingsServiceTheme() {
  }

  public SettingsServiceTheme primaryColor(@javax.annotation.Nullable String primaryColor) {
    
    this.primaryColor = primaryColor;
    return this;
  }

  /**
   * hex value for primary color
   * @return primaryColor
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRIMARY_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPrimaryColor() {
    return primaryColor;
  }


  @JsonProperty(JSON_PROPERTY_PRIMARY_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrimaryColor(@javax.annotation.Nullable String primaryColor) {
    this.primaryColor = primaryColor;
  }

  public SettingsServiceTheme backgroundColor(@javax.annotation.Nullable String backgroundColor) {
    
    this.backgroundColor = backgroundColor;
    return this;
  }

  /**
   * hex value for background color
   * @return backgroundColor
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BACKGROUND_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBackgroundColor() {
    return backgroundColor;
  }


  @JsonProperty(JSON_PROPERTY_BACKGROUND_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBackgroundColor(@javax.annotation.Nullable String backgroundColor) {
    this.backgroundColor = backgroundColor;
  }

  public SettingsServiceTheme warnColor(@javax.annotation.Nullable String warnColor) {
    
    this.warnColor = warnColor;
    return this;
  }

  /**
   * hex value for warn color
   * @return warnColor
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WARN_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getWarnColor() {
    return warnColor;
  }


  @JsonProperty(JSON_PROPERTY_WARN_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWarnColor(@javax.annotation.Nullable String warnColor) {
    this.warnColor = warnColor;
  }

  public SettingsServiceTheme fontColor(@javax.annotation.Nullable String fontColor) {
    
    this.fontColor = fontColor;
    return this;
  }

  /**
   * hex value for font color
   * @return fontColor
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FONT_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFontColor() {
    return fontColor;
  }


  @JsonProperty(JSON_PROPERTY_FONT_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFontColor(@javax.annotation.Nullable String fontColor) {
    this.fontColor = fontColor;
  }

  public SettingsServiceTheme logoUrl(@javax.annotation.Nullable String logoUrl) {
    
    this.logoUrl = logoUrl;
    return this;
  }

  /**
   * url to the logo
   * @return logoUrl
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOGO_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLogoUrl() {
    return logoUrl;
  }


  @JsonProperty(JSON_PROPERTY_LOGO_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogoUrl(@javax.annotation.Nullable String logoUrl) {
    this.logoUrl = logoUrl;
  }

  public SettingsServiceTheme iconUrl(@javax.annotation.Nullable String iconUrl) {
    
    this.iconUrl = iconUrl;
    return this;
  }

  /**
   * url to the icon
   * @return iconUrl
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ICON_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIconUrl() {
    return iconUrl;
  }


  @JsonProperty(JSON_PROPERTY_ICON_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIconUrl(@javax.annotation.Nullable String iconUrl) {
    this.iconUrl = iconUrl;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettingsServiceTheme settingsServiceTheme = (SettingsServiceTheme) o;
    return Objects.equals(this.primaryColor, settingsServiceTheme.primaryColor) &&
        Objects.equals(this.backgroundColor, settingsServiceTheme.backgroundColor) &&
        Objects.equals(this.warnColor, settingsServiceTheme.warnColor) &&
        Objects.equals(this.fontColor, settingsServiceTheme.fontColor) &&
        Objects.equals(this.logoUrl, settingsServiceTheme.logoUrl) &&
        Objects.equals(this.iconUrl, settingsServiceTheme.iconUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(primaryColor, backgroundColor, warnColor, fontColor, logoUrl, iconUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettingsServiceTheme {\n");
    sb.append("    primaryColor: ").append(toIndentedString(primaryColor)).append("\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    warnColor: ").append(toIndentedString(warnColor)).append("\n");
    sb.append("    fontColor: ").append(toIndentedString(fontColor)).append("\n");
    sb.append("    logoUrl: ").append(toIndentedString(logoUrl)).append("\n");
    sb.append("    iconUrl: ").append(toIndentedString(iconUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `primaryColor` to the URL query string
    if (getPrimaryColor() != null) {
      try {
        joiner.add(String.format("%sprimaryColor%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPrimaryColor()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `backgroundColor` to the URL query string
    if (getBackgroundColor() != null) {
      try {
        joiner.add(String.format("%sbackgroundColor%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBackgroundColor()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `warnColor` to the URL query string
    if (getWarnColor() != null) {
      try {
        joiner.add(String.format("%swarnColor%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWarnColor()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `fontColor` to the URL query string
    if (getFontColor() != null) {
      try {
        joiner.add(String.format("%sfontColor%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFontColor()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `logoUrl` to the URL query string
    if (getLogoUrl() != null) {
      try {
        joiner.add(String.format("%slogoUrl%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLogoUrl()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `iconUrl` to the URL query string
    if (getIconUrl() != null) {
      try {
        joiner.add(String.format("%siconUrl%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIconUrl()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

