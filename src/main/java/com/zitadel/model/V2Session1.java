/*
 * Zitadel SDK
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zitadel.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.zitadel.model.V2Factors;
import com.zitadel.model.V2UserAgent;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * V2Session1
 */
@JsonPropertyOrder({
  V2Session1.JSON_PROPERTY_ID,
  V2Session1.JSON_PROPERTY_CREATION_DATE,
  V2Session1.JSON_PROPERTY_CHANGE_DATE,
  V2Session1.JSON_PROPERTY_SEQUENCE,
  V2Session1.JSON_PROPERTY_FACTORS,
  V2Session1.JSON_PROPERTY_METADATA,
  V2Session1.JSON_PROPERTY_USER_AGENT,
  V2Session1.JSON_PROPERTY_EXPIRATION_DATE
})
@JsonTypeName("v2Session_1")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class V2Session1 {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nullable
  private String id;

  public static final String JSON_PROPERTY_CREATION_DATE = "creationDate";
  @javax.annotation.Nullable
  private OffsetDateTime creationDate;

  public static final String JSON_PROPERTY_CHANGE_DATE = "changeDate";
  @javax.annotation.Nullable
  private OffsetDateTime changeDate;

  public static final String JSON_PROPERTY_SEQUENCE = "sequence";
  @javax.annotation.Nullable
  private String sequence;

  public static final String JSON_PROPERTY_FACTORS = "factors";
  @javax.annotation.Nullable
  private V2Factors factors;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  @javax.annotation.Nullable
  private Map<String, byte[]> metadata = new HashMap<>();

  public static final String JSON_PROPERTY_USER_AGENT = "userAgent";
  @javax.annotation.Nullable
  private V2UserAgent userAgent;

  public static final String JSON_PROPERTY_EXPIRATION_DATE = "expirationDate";
  @javax.annotation.Nullable
  private OffsetDateTime expirationDate;

  public V2Session1() {
  }

  public V2Session1 id(@javax.annotation.Nullable String id) {
    
    this.id = id;
    return this;
  }

  /**
   * \&quot;id of the session\&quot;
   * @return id
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }

  public V2Session1 creationDate(@javax.annotation.Nullable OffsetDateTime creationDate) {
    
    this.creationDate = creationDate;
    return this;
  }

  /**
   * \&quot;time when the session was created\&quot;
   * @return creationDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreationDate() {
    return creationDate;
  }


  @JsonProperty(JSON_PROPERTY_CREATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreationDate(@javax.annotation.Nullable OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }

  public V2Session1 changeDate(@javax.annotation.Nullable OffsetDateTime changeDate) {
    
    this.changeDate = changeDate;
    return this;
  }

  /**
   * \&quot;time when the session was last updated\&quot;
   * @return changeDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHANGE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getChangeDate() {
    return changeDate;
  }


  @JsonProperty(JSON_PROPERTY_CHANGE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChangeDate(@javax.annotation.Nullable OffsetDateTime changeDate) {
    this.changeDate = changeDate;
  }

  public V2Session1 sequence(@javax.annotation.Nullable String sequence) {
    
    this.sequence = sequence;
    return this;
  }

  /**
   * \&quot;sequence of the session\&quot;
   * @return sequence
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEQUENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSequence() {
    return sequence;
  }


  @JsonProperty(JSON_PROPERTY_SEQUENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSequence(@javax.annotation.Nullable String sequence) {
    this.sequence = sequence;
  }

  public V2Session1 factors(@javax.annotation.Nullable V2Factors factors) {
    
    this.factors = factors;
    return this;
  }

  /**
   * Get factors
   * @return factors
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FACTORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public V2Factors getFactors() {
    return factors;
  }


  @JsonProperty(JSON_PROPERTY_FACTORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFactors(@javax.annotation.Nullable V2Factors factors) {
    this.factors = factors;
  }

  public V2Session1 metadata(@javax.annotation.Nullable Map<String, byte[]> metadata) {
    
    this.metadata = metadata;
    return this;
  }

  public V2Session1 putMetadataItem(String key, byte[] metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * \&quot;custom key value list\&quot;
   * @return metadata
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, byte[]> getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(@javax.annotation.Nullable Map<String, byte[]> metadata) {
    this.metadata = metadata;
  }

  public V2Session1 userAgent(@javax.annotation.Nullable V2UserAgent userAgent) {
    
    this.userAgent = userAgent;
    return this;
  }

  /**
   * Get userAgent
   * @return userAgent
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_AGENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public V2UserAgent getUserAgent() {
    return userAgent;
  }


  @JsonProperty(JSON_PROPERTY_USER_AGENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserAgent(@javax.annotation.Nullable V2UserAgent userAgent) {
    this.userAgent = userAgent;
  }

  public V2Session1 expirationDate(@javax.annotation.Nullable OffsetDateTime expirationDate) {
    
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * \&quot;time the session will be automatically invalidated\&quot;
   * @return expirationDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getExpirationDate() {
    return expirationDate;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpirationDate(@javax.annotation.Nullable OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V2Session1 v2Session1 = (V2Session1) o;
    return Objects.equals(this.id, v2Session1.id) &&
        Objects.equals(this.creationDate, v2Session1.creationDate) &&
        Objects.equals(this.changeDate, v2Session1.changeDate) &&
        Objects.equals(this.sequence, v2Session1.sequence) &&
        Objects.equals(this.factors, v2Session1.factors) &&
        Objects.equals(this.metadata, v2Session1.metadata) &&
        Objects.equals(this.userAgent, v2Session1.userAgent) &&
        Objects.equals(this.expirationDate, v2Session1.expirationDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, creationDate, changeDate, sequence, factors, metadata, userAgent, expirationDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V2Session1 {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    changeDate: ").append(toIndentedString(changeDate)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    factors: ").append(toIndentedString(factors)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `creationDate` to the URL query string
    if (getCreationDate() != null) {
      try {
        joiner.add(String.format("%screationDate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreationDate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `changeDate` to the URL query string
    if (getChangeDate() != null) {
      try {
        joiner.add(String.format("%schangeDate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getChangeDate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `sequence` to the URL query string
    if (getSequence() != null) {
      try {
        joiner.add(String.format("%ssequence%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSequence()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `factors` to the URL query string
    if (getFactors() != null) {
      joiner.add(getFactors().toUrlQueryString(prefix + "factors" + suffix));
    }

    // add `metadata` to the URL query string
    if (getMetadata() != null) {
      for (String _key : getMetadata().keySet()) {
        try {
          joiner.add(String.format("%smetadata%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getMetadata().get(_key), URLEncoder.encode(String.valueOf(getMetadata().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `userAgent` to the URL query string
    if (getUserAgent() != null) {
      joiner.add(getUserAgent().toUrlQueryString(prefix + "userAgent" + suffix));
    }

    // add `expirationDate` to the URL query string
    if (getExpirationDate() != null) {
      try {
        joiner.add(String.format("%sexpirationDate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExpirationDate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

