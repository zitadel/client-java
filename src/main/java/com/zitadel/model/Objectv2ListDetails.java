/*
 * Zitadel SDK
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zitadel.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Objectv2ListDetails
 */
@JsonPropertyOrder({
  Objectv2ListDetails.JSON_PROPERTY_TOTAL_RESULT,
  Objectv2ListDetails.JSON_PROPERTY_PROCESSED_SEQUENCE,
  Objectv2ListDetails.JSON_PROPERTY_TIMESTAMP
})
@JsonTypeName("objectv2ListDetails")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class Objectv2ListDetails {
  public static final String JSON_PROPERTY_TOTAL_RESULT = "totalResult";
  @javax.annotation.Nullable
  private String totalResult;

  public static final String JSON_PROPERTY_PROCESSED_SEQUENCE = "processedSequence";
  @javax.annotation.Nullable
  private String processedSequence;

  public static final String JSON_PROPERTY_TIMESTAMP = "timestamp";
  @javax.annotation.Nullable
  private OffsetDateTime timestamp;

  public Objectv2ListDetails() {
  }

  public Objectv2ListDetails totalResult(@javax.annotation.Nullable String totalResult) {
    
    this.totalResult = totalResult;
    return this;
  }

  /**
   * Get totalResult
   * @return totalResult
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_RESULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTotalResult() {
    return totalResult;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_RESULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalResult(@javax.annotation.Nullable String totalResult) {
    this.totalResult = totalResult;
  }

  public Objectv2ListDetails processedSequence(@javax.annotation.Nullable String processedSequence) {
    
    this.processedSequence = processedSequence;
    return this;
  }

  /**
   * Get processedSequence
   * @return processedSequence
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROCESSED_SEQUENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProcessedSequence() {
    return processedSequence;
  }


  @JsonProperty(JSON_PROPERTY_PROCESSED_SEQUENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessedSequence(@javax.annotation.Nullable String processedSequence) {
    this.processedSequence = processedSequence;
  }

  public Objectv2ListDetails timestamp(@javax.annotation.Nullable OffsetDateTime timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

  /**
   * the last time the projection got updated
   * @return timestamp
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimestamp(@javax.annotation.Nullable OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Objectv2ListDetails objectv2ListDetails = (Objectv2ListDetails) o;
    return Objects.equals(this.totalResult, objectv2ListDetails.totalResult) &&
        Objects.equals(this.processedSequence, objectv2ListDetails.processedSequence) &&
        Objects.equals(this.timestamp, objectv2ListDetails.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalResult, processedSequence, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Objectv2ListDetails {\n");
    sb.append("    totalResult: ").append(toIndentedString(totalResult)).append("\n");
    sb.append("    processedSequence: ").append(toIndentedString(processedSequence)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `totalResult` to the URL query string
    if (getTotalResult() != null) {
      try {
        joiner.add(String.format("%stotalResult%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTotalResult()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `processedSequence` to the URL query string
    if (getProcessedSequence() != null) {
      try {
        joiner.add(String.format("%sprocessedSequence%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getProcessedSequence()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `timestamp` to the URL query string
    if (getTimestamp() != null) {
      try {
        joiner.add(String.format("%stimestamp%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTimestamp()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

