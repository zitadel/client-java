/*
 * Zitadel SDK
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zitadel.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.StringJoiner;

/**
 * SessionServiceSetSessionBody
 */
@JsonPropertyOrder({
  SessionServiceSetSessionBody.JSON_PROPERTY_SESSION_TOKEN,
  SessionServiceSetSessionBody.JSON_PROPERTY_CHECKS,
  SessionServiceSetSessionBody.JSON_PROPERTY_METADATA,
  SessionServiceSetSessionBody.JSON_PROPERTY_CHALLENGES,
  SessionServiceSetSessionBody.JSON_PROPERTY_LIFETIME
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class SessionServiceSetSessionBody {
  public static final String JSON_PROPERTY_SESSION_TOKEN = "sessionToken";
  public static final String JSON_PROPERTY_CHECKS = "checks";
  public static final String JSON_PROPERTY_METADATA = "metadata";
  public static final String JSON_PROPERTY_CHALLENGES = "challenges";
  public static final String JSON_PROPERTY_LIFETIME = "lifetime";
  @javax.annotation.Nullable
  private String sessionToken;
  @javax.annotation.Nullable
  private V2Checks checks;
  @javax.annotation.Nullable
  private Map<String, byte[]> metadata = new HashMap<>();
  @javax.annotation.Nullable
  private V2RequestChallenges challenges;
  @javax.annotation.Nullable
  private String lifetime;

  public SessionServiceSetSessionBody() {
  }

  public SessionServiceSetSessionBody sessionToken(@javax.annotation.Nullable String sessionToken) {

    this.sessionToken = sessionToken;
    return this;
  }

  /**
   * \&quot;DEPRECATED: this field is ignored.\&quot;
   *
   * @return sessionToken
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SESSION_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSessionToken() {
    return sessionToken;
  }


  @JsonProperty(JSON_PROPERTY_SESSION_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSessionToken(@javax.annotation.Nullable String sessionToken) {
    this.sessionToken = sessionToken;
  }

  public SessionServiceSetSessionBody checks(@javax.annotation.Nullable V2Checks checks) {

    this.checks = checks;
    return this;
  }

  /**
   * Get checks
   *
   * @return checks
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHECKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public V2Checks getChecks() {
    return checks;
  }


  @JsonProperty(JSON_PROPERTY_CHECKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChecks(@javax.annotation.Nullable V2Checks checks) {
    this.checks = checks;
  }

  public SessionServiceSetSessionBody metadata(@javax.annotation.Nullable Map<String, byte[]> metadata) {

    this.metadata = metadata;
    return this;
  }

  public SessionServiceSetSessionBody putMetadataItem(String key, byte[] metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * \&quot;custom key value list to be stored on the session\&quot;
   *
   * @return metadata
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, byte[]> getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(@javax.annotation.Nullable Map<String, byte[]> metadata) {
    this.metadata = metadata;
  }

  public SessionServiceSetSessionBody challenges(@javax.annotation.Nullable V2RequestChallenges challenges) {

    this.challenges = challenges;
    return this;
  }

  /**
   * Get challenges
   *
   * @return challenges
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHALLENGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public V2RequestChallenges getChallenges() {
    return challenges;
  }


  @JsonProperty(JSON_PROPERTY_CHALLENGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChallenges(@javax.annotation.Nullable V2RequestChallenges challenges) {
    this.challenges = challenges;
  }

  public SessionServiceSetSessionBody lifetime(@javax.annotation.Nullable String lifetime) {

    this.lifetime = lifetime;
    return this;
  }

  /**
   * \&quot;duration (in seconds) after which the session will be automatically invalidated\&quot;
   *
   * @return lifetime
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIFETIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLifetime() {
    return lifetime;
  }


  @JsonProperty(JSON_PROPERTY_LIFETIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLifetime(@javax.annotation.Nullable String lifetime) {
    this.lifetime = lifetime;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SessionServiceSetSessionBody sessionServiceSetSessionBody = (SessionServiceSetSessionBody) o;
    return Objects.equals(this.sessionToken, sessionServiceSetSessionBody.sessionToken) &&
      Objects.equals(this.checks, sessionServiceSetSessionBody.checks) &&
      Objects.equals(this.metadata, sessionServiceSetSessionBody.metadata) &&
      Objects.equals(this.challenges, sessionServiceSetSessionBody.challenges) &&
      Objects.equals(this.lifetime, sessionServiceSetSessionBody.lifetime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sessionToken, checks, metadata, challenges, lifetime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SessionServiceSetSessionBody {\n");
    sb.append("    sessionToken: ").append(toIndentedString(sessionToken)).append("\n");
    sb.append("    checks: ").append(toIndentedString(checks)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    challenges: ").append(toIndentedString(challenges)).append("\n");
    sb.append("    lifetime: ").append(toIndentedString(lifetime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `sessionToken` to the URL query string
    if (getSessionToken() != null) {
      try {
        joiner.add(String.format("%ssessionToken%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSessionToken()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `checks` to the URL query string
    if (getChecks() != null) {
      joiner.add(getChecks().toUrlQueryString(prefix + "checks" + suffix));
    }

    // add `metadata` to the URL query string
    if (getMetadata() != null) {
      for (String _key : getMetadata().keySet()) {
        try {
          joiner.add(String.format("%smetadata%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
            getMetadata().get(_key), URLEncoder.encode(String.valueOf(getMetadata().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `challenges` to the URL query string
    if (getChallenges() != null) {
      joiner.add(getChallenges().toUrlQueryString(prefix + "challenges" + suffix));
    }

    // add `lifetime` to the URL query string
    if (getLifetime() != null) {
      try {
        joiner.add(String.format("%slifetime%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLifetime()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

