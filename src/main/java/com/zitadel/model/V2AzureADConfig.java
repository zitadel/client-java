/*
 * Zitadel SDK
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zitadel.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

/**
 * V2AzureADConfig
 */
@JsonPropertyOrder({
  V2AzureADConfig.JSON_PROPERTY_CLIENT_ID,
  V2AzureADConfig.JSON_PROPERTY_TENANT,
  V2AzureADConfig.JSON_PROPERTY_EMAIL_VERIFIED,
  V2AzureADConfig.JSON_PROPERTY_SCOPES
})
@JsonTypeName("v2AzureADConfig")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class V2AzureADConfig {
  public static final String JSON_PROPERTY_CLIENT_ID = "clientId";
  public static final String JSON_PROPERTY_TENANT = "tenant";
  public static final String JSON_PROPERTY_EMAIL_VERIFIED = "emailVerified";
  public static final String JSON_PROPERTY_SCOPES = "scopes";
  @javax.annotation.Nullable
  private String clientId;
  @javax.annotation.Nullable
  private V2AzureADTenant tenant;
  @javax.annotation.Nullable
  private Boolean emailVerified;
  @javax.annotation.Nullable
  private List<String> scopes = new ArrayList<>();

  public V2AzureADConfig() {
  }

  public V2AzureADConfig clientId(@javax.annotation.Nullable String clientId) {

    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   *
   * @return clientId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLIENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getClientId() {
    return clientId;
  }


  @JsonProperty(JSON_PROPERTY_CLIENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClientId(@javax.annotation.Nullable String clientId) {
    this.clientId = clientId;
  }

  public V2AzureADConfig tenant(@javax.annotation.Nullable V2AzureADTenant tenant) {

    this.tenant = tenant;
    return this;
  }

  /**
   * Get tenant
   *
   * @return tenant
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TENANT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public V2AzureADTenant getTenant() {
    return tenant;
  }


  @JsonProperty(JSON_PROPERTY_TENANT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTenant(@javax.annotation.Nullable V2AzureADTenant tenant) {
    this.tenant = tenant;
  }

  public V2AzureADConfig emailVerified(@javax.annotation.Nullable Boolean emailVerified) {

    this.emailVerified = emailVerified;
    return this;
  }

  /**
   * Azure AD doesn&#39;t send if the email has been verified. Enable this if the user email should always be added verified in ZITADEL (no verification emails will be sent).
   *
   * @return emailVerified
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMAIL_VERIFIED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEmailVerified() {
    return emailVerified;
  }


  @JsonProperty(JSON_PROPERTY_EMAIL_VERIFIED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmailVerified(@javax.annotation.Nullable Boolean emailVerified) {
    this.emailVerified = emailVerified;
  }

  public V2AzureADConfig scopes(@javax.annotation.Nullable List<String> scopes) {

    this.scopes = scopes;
    return this;
  }

  public V2AzureADConfig addScopesItem(String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

  /**
   * The scopes requested by ZITADEL during the request to Azure AD.
   *
   * @return scopes
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCOPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getScopes() {
    return scopes;
  }


  @JsonProperty(JSON_PROPERTY_SCOPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScopes(@javax.annotation.Nullable List<String> scopes) {
    this.scopes = scopes;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V2AzureADConfig v2AzureADConfig = (V2AzureADConfig) o;
    return Objects.equals(this.clientId, v2AzureADConfig.clientId) &&
      Objects.equals(this.tenant, v2AzureADConfig.tenant) &&
      Objects.equals(this.emailVerified, v2AzureADConfig.emailVerified) &&
      Objects.equals(this.scopes, v2AzureADConfig.scopes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, tenant, emailVerified, scopes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V2AzureADConfig {\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    tenant: ").append(toIndentedString(tenant)).append("\n");
    sb.append("    emailVerified: ").append(toIndentedString(emailVerified)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `clientId` to the URL query string
    if (getClientId() != null) {
      try {
        joiner.add(String.format("%sclientId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getClientId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `tenant` to the URL query string
    if (getTenant() != null) {
      joiner.add(getTenant().toUrlQueryString(prefix + "tenant" + suffix));
    }

    // add `emailVerified` to the URL query string
    if (getEmailVerified() != null) {
      try {
        joiner.add(String.format("%semailVerified%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEmailVerified()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `scopes` to the URL query string
    if (getScopes() != null) {
      for (int i = 0; i < getScopes().size(); i++) {
        try {
          joiner.add(String.format("%sscopes%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getScopes().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    return joiner.toString();
  }

}

