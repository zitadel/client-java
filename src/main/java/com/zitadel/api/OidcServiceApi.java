/*
 * merged spec
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.zitadel.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.zitadel.ApiException;
import com.zitadel.ApiClient;
import com.zitadel.BaseApi;
import com.zitadel.Configuration;
import com.zitadel.Pair;

import com.zitadel.model.OIDCServiceCreateCallbackBody;
import com.zitadel.model.RpcStatus;
import com.zitadel.model.V2CreateCallbackResponse;
import com.zitadel.model.V2GetAuthRequestResponse;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class OidcServiceApi extends BaseApi {

  public OidcServiceApi() {
    super(Configuration.getDefaultApiClient());
  }

  public OidcServiceApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Finalize an Auth Request and get the callback URL.
   * Finalize an Auth Request and get the callback URL for success or failure. The user must be redirected to the URL in order to inform the application about the success or failure. On success, the URL contains details for the application to obtain the tokens. This method can only be called once for an Auth request.
   * @param authRequestId ID of the Auth Request. (required)
   * @param body  (required)
   * @return V2CreateCallbackResponse
   * @throws ApiException if fails to make API call
   */
  public V2CreateCallbackResponse oIDCServiceCreateCallback(String authRequestId, OIDCServiceCreateCallbackBody body) throws ApiException {
    return this.oIDCServiceCreateCallback(authRequestId, body, Collections.emptyMap());
  }


  /**
   * Finalize an Auth Request and get the callback URL.
   * Finalize an Auth Request and get the callback URL for success or failure. The user must be redirected to the URL in order to inform the application about the success or failure. On success, the URL contains details for the application to obtain the tokens. This method can only be called once for an Auth request.
   * @param authRequestId ID of the Auth Request. (required)
   * @param body  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return V2CreateCallbackResponse
   * @throws ApiException if fails to make API call
   */
  public V2CreateCallbackResponse oIDCServiceCreateCallback(String authRequestId, OIDCServiceCreateCallbackBody body, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'authRequestId' is set
    if (authRequestId == null) {
      throw new ApiException(400, "Missing the required parameter 'authRequestId' when calling oIDCServiceCreateCallback");
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling oIDCServiceCreateCallback");
    }
    
    // create path and map variables
    String localVarPath = "/v2/oidc/auth_requests/{authRequestId}"
      .replaceAll("\\{" + "authRequestId" + "\\}", apiClient.escapeString(apiClient.parameterToString(authRequestId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "zitadelAccessToken" };

    TypeReference<V2CreateCallbackResponse> localVarReturnType = new TypeReference<V2CreateCallbackResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get OIDC Auth Request details
   * Get OIDC Auth Request details by ID, obtained from the redirect URL. Returns details that are parsed from the application&#39;s Auth Request.
   * @param authRequestId ID of the Auth Request, as obtained from the redirect URL. (required)
   * @return V2GetAuthRequestResponse
   * @throws ApiException if fails to make API call
   */
  public V2GetAuthRequestResponse oIDCServiceGetAuthRequest(String authRequestId) throws ApiException {
    return this.oIDCServiceGetAuthRequest(authRequestId, Collections.emptyMap());
  }


  /**
   * Get OIDC Auth Request details
   * Get OIDC Auth Request details by ID, obtained from the redirect URL. Returns details that are parsed from the application&#39;s Auth Request.
   * @param authRequestId ID of the Auth Request, as obtained from the redirect URL. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return V2GetAuthRequestResponse
   * @throws ApiException if fails to make API call
   */
  public V2GetAuthRequestResponse oIDCServiceGetAuthRequest(String authRequestId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'authRequestId' is set
    if (authRequestId == null) {
      throw new ApiException(400, "Missing the required parameter 'authRequestId' when calling oIDCServiceGetAuthRequest");
    }
    
    // create path and map variables
    String localVarPath = "/v2/oidc/auth_requests/{authRequestId}"
      .replaceAll("\\{" + "authRequestId" + "\\}", apiClient.escapeString(apiClient.parameterToString(authRequestId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "zitadelAccessToken" };

    TypeReference<V2GetAuthRequestResponse> localVarReturnType = new TypeReference<V2GetAuthRequestResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "zitadelAccessToken" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
