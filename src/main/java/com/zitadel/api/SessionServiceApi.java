/*
 * merged spec
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.zitadel.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.zitadel.ApiException;
import com.zitadel.ApiClient;
import com.zitadel.BaseApi;
import com.zitadel.Configuration;
import com.zitadel.Pair;

import com.zitadel.model.RpcStatus;
import com.zitadel.model.SessionServiceDeleteSessionBody;
import com.zitadel.model.SessionServiceSetSessionBody;
import com.zitadel.model.V2CreateSessionRequest;
import com.zitadel.model.V2CreateSessionResponse;
import com.zitadel.model.V2DeleteSessionResponse;
import com.zitadel.model.V2GetSessionResponse;
import com.zitadel.model.V2ListSessionsRequest;
import com.zitadel.model.V2ListSessionsResponse;
import com.zitadel.model.V2SetSessionResponse;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class SessionServiceApi extends BaseApi {

  public SessionServiceApi() {
    super(Configuration.getDefaultApiClient());
  }

  public SessionServiceApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * Create a new session
   * Create a new session. A token will be returned, which is required for further updates of the session.
   * @param body  (required)
   * @return V2CreateSessionResponse
   * @throws ApiException if fails to make API call
   */
  public V2CreateSessionResponse sessionServiceCreateSession(V2CreateSessionRequest body) throws ApiException {
    return this.sessionServiceCreateSession(body, Collections.emptyMap());
  }


  /**
   * Create a new session
   * Create a new session. A token will be returned, which is required for further updates of the session.
   * @param body  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return V2CreateSessionResponse
   * @throws ApiException if fails to make API call
   */
  public V2CreateSessionResponse sessionServiceCreateSession(V2CreateSessionRequest body, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling sessionServiceCreateSession");
    }
    
    // create path and map variables
    String localVarPath = "/v2/sessions";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "zitadelAccessToken" };

    TypeReference<V2CreateSessionResponse> localVarReturnType = new TypeReference<V2CreateSessionResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Terminate an existing session
   * Terminate your own session or if granted any other session.
   * @param sessionId \&quot;id of the session to terminate\&quot; (required)
   * @param body  (required)
   * @return V2DeleteSessionResponse
   * @throws ApiException if fails to make API call
   */
  public V2DeleteSessionResponse sessionServiceDeleteSession(String sessionId, SessionServiceDeleteSessionBody body) throws ApiException {
    return this.sessionServiceDeleteSession(sessionId, body, Collections.emptyMap());
  }


  /**
   * Terminate an existing session
   * Terminate your own session or if granted any other session.
   * @param sessionId \&quot;id of the session to terminate\&quot; (required)
   * @param body  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return V2DeleteSessionResponse
   * @throws ApiException if fails to make API call
   */
  public V2DeleteSessionResponse sessionServiceDeleteSession(String sessionId, SessionServiceDeleteSessionBody body, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      throw new ApiException(400, "Missing the required parameter 'sessionId' when calling sessionServiceDeleteSession");
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling sessionServiceDeleteSession");
    }
    
    // create path and map variables
    String localVarPath = "/v2/sessions/{sessionId}"
      .replaceAll("\\{" + "sessionId" + "\\}", apiClient.escapeString(apiClient.parameterToString(sessionId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "zitadelAccessToken" };

    TypeReference<V2DeleteSessionResponse> localVarReturnType = new TypeReference<V2DeleteSessionResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get a session
   * Get a session and all its information like the time of the user or password verification
   * @param sessionId  (required)
   * @param sessionToken  (optional)
   * @return V2GetSessionResponse
   * @throws ApiException if fails to make API call
   */
  public V2GetSessionResponse sessionServiceGetSession(String sessionId, String sessionToken) throws ApiException {
    return this.sessionServiceGetSession(sessionId, sessionToken, Collections.emptyMap());
  }


  /**
   * Get a session
   * Get a session and all its information like the time of the user or password verification
   * @param sessionId  (required)
   * @param sessionToken  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return V2GetSessionResponse
   * @throws ApiException if fails to make API call
   */
  public V2GetSessionResponse sessionServiceGetSession(String sessionId, String sessionToken, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      throw new ApiException(400, "Missing the required parameter 'sessionId' when calling sessionServiceGetSession");
    }
    
    // create path and map variables
    String localVarPath = "/v2/sessions/{sessionId}"
      .replaceAll("\\{" + "sessionId" + "\\}", apiClient.escapeString(apiClient.parameterToString(sessionId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("sessionToken", sessionToken));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "zitadelAccessToken" };

    TypeReference<V2GetSessionResponse> localVarReturnType = new TypeReference<V2GetSessionResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Search sessions
   * Search for sessions
   * @param body  (required)
   * @return V2ListSessionsResponse
   * @throws ApiException if fails to make API call
   */
  public V2ListSessionsResponse sessionServiceListSessions(V2ListSessionsRequest body) throws ApiException {
    return this.sessionServiceListSessions(body, Collections.emptyMap());
  }


  /**
   * Search sessions
   * Search for sessions
   * @param body  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return V2ListSessionsResponse
   * @throws ApiException if fails to make API call
   */
  public V2ListSessionsResponse sessionServiceListSessions(V2ListSessionsRequest body, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling sessionServiceListSessions");
    }
    
    // create path and map variables
    String localVarPath = "/v2/sessions/search";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "zitadelAccessToken" };

    TypeReference<V2ListSessionsResponse> localVarReturnType = new TypeReference<V2ListSessionsResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update an existing session
   * Update an existing session with new information.
   * @param sessionId \&quot;id of the session to update\&quot; (required)
   * @param body  (required)
   * @return V2SetSessionResponse
   * @throws ApiException if fails to make API call
   */
  public V2SetSessionResponse sessionServiceSetSession(String sessionId, SessionServiceSetSessionBody body) throws ApiException {
    return this.sessionServiceSetSession(sessionId, body, Collections.emptyMap());
  }


  /**
   * Update an existing session
   * Update an existing session with new information.
   * @param sessionId \&quot;id of the session to update\&quot; (required)
   * @param body  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return V2SetSessionResponse
   * @throws ApiException if fails to make API call
   */
  public V2SetSessionResponse sessionServiceSetSession(String sessionId, SessionServiceSetSessionBody body, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = body;
    
    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      throw new ApiException(400, "Missing the required parameter 'sessionId' when calling sessionServiceSetSession");
    }
    
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(400, "Missing the required parameter 'body' when calling sessionServiceSetSession");
    }
    
    // create path and map variables
    String localVarPath = "/v2/sessions/{sessionId}"
      .replaceAll("\\{" + "sessionId" + "\\}", apiClient.escapeString(apiClient.parameterToString(sessionId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "zitadelAccessToken" };

    TypeReference<V2SetSessionResponse> localVarReturnType = new TypeReference<V2SetSessionResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "zitadelAccessToken" };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
