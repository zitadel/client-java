/*
 * merged spec
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zitadel.api;

import com.zitadel.ApiException;
import com.zitadel.model.RpcStatus;
import com.zitadel.model.V2GetActiveIdentityProvidersResponse;
import com.zitadel.model.V2GetBrandingSettingsResponse;
import com.zitadel.model.V2GetDomainSettingsResponse;
import com.zitadel.model.V2GetGeneralSettingsResponse;
import com.zitadel.model.V2GetLegalAndSupportSettingsResponse;
import com.zitadel.model.V2GetLockoutSettingsResponse;
import com.zitadel.model.V2GetLoginSettingsResponse;
import com.zitadel.model.V2GetPasswordComplexitySettingsResponse;
import com.zitadel.model.V2GetPasswordExpirySettingsResponse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SettingsServiceApi
 */
@Disabled
public class SettingsServiceApiTest {

    private final SettingsServiceApi api = new SettingsServiceApi();

    /**
     * Get the current active identity providers
     *
     * Return the current active identity providers for the requested context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settingsServiceGetActiveIdentityProvidersTest() throws ApiException {
        String ctxOrgId = null;
        Boolean ctxInstance = null;
        Boolean creationAllowed = null;
        Boolean linkingAllowed = null;
        Boolean autoCreation = null;
        Boolean autoLinking = null;
        V2GetActiveIdentityProvidersResponse response = api.settingsServiceGetActiveIdentityProviders(ctxOrgId, ctxInstance, creationAllowed, linkingAllowed, autoCreation, autoLinking);

        // TODO: test validations
    }
    /**
     * Get the current active branding settings
     *
     * Return the current active branding settings for the requested context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settingsServiceGetBrandingSettingsTest() throws ApiException {
        String ctxOrgId = null;
        Boolean ctxInstance = null;
        V2GetBrandingSettingsResponse response = api.settingsServiceGetBrandingSettings(ctxOrgId, ctxInstance);

        // TODO: test validations
    }
    /**
     * Get the domain settings
     *
     * Return the domain settings for the requested context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settingsServiceGetDomainSettingsTest() throws ApiException {
        String ctxOrgId = null;
        Boolean ctxInstance = null;
        V2GetDomainSettingsResponse response = api.settingsServiceGetDomainSettings(ctxOrgId, ctxInstance);

        // TODO: test validations
    }
    /**
     * Get basic information over the instance
     *
     * Return the basic information of the instance for the requested context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settingsServiceGetGeneralSettingsTest() throws ApiException {
        V2GetGeneralSettingsResponse response = api.settingsServiceGetGeneralSettings();

        // TODO: test validations
    }
    /**
     * Get the legal and support settings
     *
     * Return the legal settings for the requested context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settingsServiceGetLegalAndSupportSettingsTest() throws ApiException {
        String ctxOrgId = null;
        Boolean ctxInstance = null;
        V2GetLegalAndSupportSettingsResponse response = api.settingsServiceGetLegalAndSupportSettings(ctxOrgId, ctxInstance);

        // TODO: test validations
    }
    /**
     * Get the lockout settings
     *
     * Return the lockout settings for the requested context, which define when a user will be locked
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settingsServiceGetLockoutSettingsTest() throws ApiException {
        String ctxOrgId = null;
        Boolean ctxInstance = null;
        V2GetLockoutSettingsResponse response = api.settingsServiceGetLockoutSettings(ctxOrgId, ctxInstance);

        // TODO: test validations
    }
    /**
     * Get the login settings
     *
     * Return the settings for the requested context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settingsServiceGetLoginSettingsTest() throws ApiException {
        String ctxOrgId = null;
        Boolean ctxInstance = null;
        V2GetLoginSettingsResponse response = api.settingsServiceGetLoginSettings(ctxOrgId, ctxInstance);

        // TODO: test validations
    }
    /**
     * Get the password complexity settings
     *
     * Return the password complexity settings for the requested context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settingsServiceGetPasswordComplexitySettingsTest() throws ApiException {
        String ctxOrgId = null;
        Boolean ctxInstance = null;
        V2GetPasswordComplexitySettingsResponse response = api.settingsServiceGetPasswordComplexitySettings(ctxOrgId, ctxInstance);

        // TODO: test validations
    }
    /**
     * Get the password expiry settings
     *
     * Return the password expiry settings for the requested context
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void settingsServiceGetPasswordExpirySettingsTest() throws ApiException {
        String ctxOrgId = null;
        Boolean ctxInstance = null;
        V2GetPasswordExpirySettingsResponse response = api.settingsServiceGetPasswordExpirySettings(ctxOrgId, ctxInstance);

        // TODO: test validations
    }
}
