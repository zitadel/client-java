/*
 * OpenAI API
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zitadel.api;

import com.zitadel.ApiException;
import com.zitadel.model.RpcStatus;
import com.zitadel.model.UserServiceAddIDPLinkBody;
import com.zitadel.model.UserServiceCreateInviteCodeBody;
import com.zitadel.model.UserServiceCreatePasskeyRegistrationLinkBody;
import com.zitadel.model.UserServiceListIDPLinksBody;
import com.zitadel.model.UserServicePasswordResetBody;
import com.zitadel.model.UserServiceRegisterPasskeyBody;
import com.zitadel.model.UserServiceRegisterU2FBody;
import com.zitadel.model.UserServiceResendEmailCodeBody;
import com.zitadel.model.UserServiceResendPhoneCodeBody;
import com.zitadel.model.UserServiceRetrieveIdentityProviderIntentBody;
import com.zitadel.model.UserServiceSendEmailCodeBody;
import com.zitadel.model.UserServiceSetEmailBody;
import com.zitadel.model.UserServiceSetPhoneBody;
import com.zitadel.model.UserServiceUpdateHumanUserBody;
import com.zitadel.model.UserServiceVerifyEmailBody;
import com.zitadel.model.UserServiceVerifyInviteCodeBody;
import com.zitadel.model.UserServiceVerifyPasskeyRegistrationBody;
import com.zitadel.model.UserServiceVerifyPhoneBody;
import com.zitadel.model.UserServiceVerifyTOTPRegistrationBody;
import com.zitadel.model.UserServiceVerifyU2FRegistrationBody;
import com.zitadel.model.V2AddHumanUserRequest;
import com.zitadel.model.V2AddHumanUserResponse;
import com.zitadel.model.V2AddIDPLinkResponse;
import com.zitadel.model.V2AddOTPEmailResponse;
import com.zitadel.model.V2AddOTPSMSResponse;
import com.zitadel.model.V2CreateInviteCodeResponse;
import com.zitadel.model.V2CreatePasskeyRegistrationLinkResponse;
import com.zitadel.model.V2DeactivateUserResponse;
import com.zitadel.model.V2DeleteUserResponse;
import com.zitadel.model.V2GetUserByIDResponse;
import com.zitadel.model.V2HumanMFAInitSkippedResponse;
import com.zitadel.model.V2ListAuthenticationFactorsResponse;
import com.zitadel.model.V2ListAuthenticationMethodTypesResponse;
import com.zitadel.model.V2ListIDPLinksResponse;
import com.zitadel.model.V2ListPasskeysResponse;
import com.zitadel.model.V2ListUsersRequest;
import com.zitadel.model.V2ListUsersResponse;
import com.zitadel.model.V2LockUserResponse;
import com.zitadel.model.V2PasswordResetResponse;
import com.zitadel.model.V2ReactivateUserResponse;
import com.zitadel.model.V2RegisterPasskeyResponse;
import com.zitadel.model.V2RegisterTOTPResponse;
import com.zitadel.model.V2RegisterU2FResponse;
import com.zitadel.model.V2RemoveIDPLinkResponse;
import com.zitadel.model.V2RemoveOTPEmailResponse;
import com.zitadel.model.V2RemoveOTPSMSResponse;
import com.zitadel.model.V2RemovePasskeyResponse;
import com.zitadel.model.V2RemovePhoneResponse;
import com.zitadel.model.V2RemoveTOTPResponse;
import com.zitadel.model.V2RemoveU2FResponse;
import com.zitadel.model.V2ResendEmailCodeResponse;
import com.zitadel.model.V2ResendInviteCodeResponse;
import com.zitadel.model.V2ResendPhoneCodeResponse;
import com.zitadel.model.V2RetrieveIdentityProviderIntentResponse;
import com.zitadel.model.V2SendEmailCodeResponse;
import com.zitadel.model.V2SetEmailResponse;
import com.zitadel.model.V2SetPasswordResponse;
import com.zitadel.model.V2SetPhoneResponse;
import com.zitadel.model.V2StartIdentityProviderIntentRequest;
import com.zitadel.model.V2StartIdentityProviderIntentResponse;
import com.zitadel.model.V2UnlockUserResponse;
import com.zitadel.model.V2UpdateHumanUserResponse;
import com.zitadel.model.V2UserServiceSetPasswordBody;
import com.zitadel.model.V2VerifyEmailResponse;
import com.zitadel.model.V2VerifyInviteCodeResponse;
import com.zitadel.model.V2VerifyPasskeyRegistrationResponse;
import com.zitadel.model.V2VerifyPhoneResponse;
import com.zitadel.model.V2VerifyTOTPRegistrationResponse;
import com.zitadel.model.V2VerifyU2FRegistrationResponse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserServiceApi
 */
@Disabled
public class UserServiceApiTest {

    private final UserServiceApi api = new UserServiceApi();

    /**
     * Create a new human user
     *
     * Create/import a new user with the type human. The newly created user will get a verification email if either the email address is not marked as verified and you did not request the verification to be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addHumanUserTest() throws ApiException {
        V2AddHumanUserRequest body = null;
        V2AddHumanUserResponse response = api.addHumanUser(body);

        // TODO: test validations
    }
    /**
     * Add link to an identity provider to an user
     *
     * Add link to an identity provider to an user..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addIDPLinkTest() throws ApiException {
        String userId = null;
        UserServiceAddIDPLinkBody body = null;
        V2AddIDPLinkResponse response = api.addIDPLink(userId, body);

        // TODO: test validations
    }
    /**
     * Add OTP Email for a user
     *
     * Add a new One-Time Password (OTP) Email factor to the authenticated user. OTP Email will enable the user to verify a OTP with the latest verified email. The email has to be verified to add the second factor..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addOTPEmailTest() throws ApiException {
        String userId = null;
        V2AddOTPEmailResponse response = api.addOTPEmail(userId);

        // TODO: test validations
    }
    /**
     * Add OTP SMS for a user
     *
     * Add a new One-Time Password (OTP) SMS factor to the authenticated user. OTP SMS will enable the user to verify a OTP with the latest verified phone number. The phone number has to be verified to add the second factor..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addOTPSMSTest() throws ApiException {
        String userId = null;
        V2AddOTPSMSResponse response = api.addOTPSMS(userId);

        // TODO: test validations
    }
    /**
     * Create an invite code for a user
     *
     * Create an invite code for a user to initialize their first authentication method (password, passkeys, IdP) depending on the organization&#39;s available methods.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createInviteCodeTest() throws ApiException {
        String userId = null;
        UserServiceCreateInviteCodeBody body = null;
        V2CreateInviteCodeResponse response = api.createInviteCode(userId, body);

        // TODO: test validations
    }
    /**
     * Create a passkey registration link for a user
     *
     * Create a passkey registration link which includes a code and either return it or send it to the user..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPasskeyRegistrationLinkTest() throws ApiException {
        String userId = null;
        UserServiceCreatePasskeyRegistrationLinkBody body = null;
        V2CreatePasskeyRegistrationLinkResponse response = api.createPasskeyRegistrationLink(userId, body);

        // TODO: test validations
    }
    /**
     * Deactivate user
     *
     * The state of the user will be changed to &#39;deactivated&#39;. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state &#39;deactivated&#39;. Use deactivate user when the user should not be able to use the account anymore, but you still need access to the user data..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deactivateUserTest() throws ApiException {
        String userId = null;
        V2DeactivateUserResponse response = api.deactivateUser(userId);

        // TODO: test validations
    }
    /**
     * Delete user
     *
     * The state of the user will be changed to &#39;deleted&#39;. The user will not be able to log in anymore. Endpoints requesting this user will return an error &#39;User not found..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String userId = null;
        V2DeleteUserResponse response = api.deleteUser(userId);

        // TODO: test validations
    }
    /**
     * User by ID
     *
     * Returns the full user object (human or machine) including the profile, email, etc..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserByIDTest() throws ApiException {
        String userId = null;
        V2GetUserByIDResponse response = api.getUserByID(userId);

        // TODO: test validations
    }
    /**
     * MFA Init Skipped
     *
     * Update the last time the user has skipped MFA initialization. The server timestamp is used.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void humanMFAInitSkippedTest() throws ApiException {
        String userId = null;
        V2HumanMFAInitSkippedResponse response = api.humanMFAInitSkipped(userId);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAuthenticationFactorsTest() throws ApiException {
        String userId = null;
        List<String> authFactors = null;
        List<String> states = null;
        V2ListAuthenticationFactorsResponse response = api.listAuthenticationFactors(userId, authFactors, states);

        // TODO: test validations
    }
    /**
     * List all possible authentication methods of a user
     *
     * List all possible authentication methods of a user like password, passwordless, (T)OTP and more..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAuthenticationMethodTypesTest() throws ApiException {
        String userId = null;
        Boolean domainQueryIncludeWithoutDomain = null;
        String domainQueryDomain = null;
        V2ListAuthenticationMethodTypesResponse response = api.listAuthenticationMethodTypes(userId, domainQueryIncludeWithoutDomain, domainQueryDomain);

        // TODO: test validations
    }
    /**
     * List links to an identity provider of an user
     *
     * List links to an identity provider of an user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listIDPLinksTest() throws ApiException {
        String userId = null;
        UserServiceListIDPLinksBody body = null;
        V2ListIDPLinksResponse response = api.listIDPLinks(userId, body);

        // TODO: test validations
    }
    /**
     * List passkeys of an user
     *
     * List passkeys of an user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPasskeysTest() throws ApiException {
        String userId = null;
        V2ListPasskeysResponse response = api.listPasskeys(userId);

        // TODO: test validations
    }
    /**
     * Search Users
     *
     * Search for users. By default, we will return all users of your instance that you have permission to read. Make sure to include a limit and sorting for pagination.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listUsersTest() throws ApiException {
        V2ListUsersRequest body = null;
        V2ListUsersResponse response = api.listUsers(body);

        // TODO: test validations
    }
    /**
     * Lock user
     *
     * The state of the user will be changed to &#39;locked&#39;. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state &#39;locked&#39;. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.)..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lockUserTest() throws ApiException {
        String userId = null;
        V2LockUserResponse response = api.lockUser(userId);

        // TODO: test validations
    }
    /**
     * Request a code to reset a password
     *
     * Request a code to reset a password..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void passwordResetTest() throws ApiException {
        String userId = null;
        UserServicePasswordResetBody body = null;
        V2PasswordResetResponse response = api.passwordReset(userId, body);

        // TODO: test validations
    }
    /**
     * Reactivate user
     *
     * Reactivate a user with the state &#39;deactivated&#39;. The user will be able to log in again afterward. The endpoint returns an error if the user is not in the state &#39;deactivated&#39;..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reactivateUserTest() throws ApiException {
        String userId = null;
        V2ReactivateUserResponse response = api.reactivateUser(userId);

        // TODO: test validations
    }
    /**
     * Start the registration of passkey for a user
     *
     * Start the registration of a passkey for a user, as a response the public key credential creation options are returned, which are used to verify the passkey..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerPasskeyTest() throws ApiException {
        String userId = null;
        UserServiceRegisterPasskeyBody body = null;
        V2RegisterPasskeyResponse response = api.registerPasskey(userId, body);

        // TODO: test validations
    }
    /**
     * Start the registration of a TOTP generator for a user
     *
     * Start the registration of a TOTP generator for a user, as a response a secret returned, which is used to initialize a TOTP app or device..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerTOTPTest() throws ApiException {
        String userId = null;
        V2RegisterTOTPResponse response = api.registerTOTP(userId);

        // TODO: test validations
    }
    /**
     * Start the registration of a u2f token for a user
     *
     * Start the registration of a u2f token for a user, as a response the public key credential creation options are returned, which are used to verify the u2f token..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerU2FTest() throws ApiException {
        String userId = null;
        UserServiceRegisterU2FBody body = null;
        V2RegisterU2FResponse response = api.registerU2F(userId, body);

        // TODO: test validations
    }
    /**
     * Remove link of an identity provider to an user
     *
     * Remove link of an identity provider to an user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeIDPLinkTest() throws ApiException {
        String userId = null;
        String idpId = null;
        String linkedUserId = null;
        V2RemoveIDPLinkResponse response = api.removeIDPLink(userId, idpId, linkedUserId);

        // TODO: test validations
    }
    /**
     * Remove One-Time Password (OTP) Email from a user
     *
     * Remove the configured One-Time Password (OTP) Email factor of a user. As only one OTP Email per user is allowed, the user will not have OTP Email as a second factor afterward.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeOTPEmailTest() throws ApiException {
        String userId = null;
        V2RemoveOTPEmailResponse response = api.removeOTPEmail(userId);

        // TODO: test validations
    }
    /**
     * Remove One-Time Password (OTP) SMS from a user
     *
     * Remove the configured One-Time Password (OTP) SMS factor of a user. As only one OTP SMS per user is allowed, the user will not have OTP SMS as a second factor afterward.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeOTPSMSTest() throws ApiException {
        String userId = null;
        V2RemoveOTPSMSResponse response = api.removeOTPSMS(userId);

        // TODO: test validations
    }
    /**
     * Remove passkey from a user
     *
     * Remove passkey from a user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removePasskeyTest() throws ApiException {
        String userId = null;
        String passkeyId = null;
        V2RemovePasskeyResponse response = api.removePasskey(userId, passkeyId);

        // TODO: test validations
    }
    /**
     * Delete the user phone
     *
     * Delete the phone number of a user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removePhoneTest() throws ApiException {
        String userId = null;
        V2RemovePhoneResponse response = api.removePhone(userId);

        // TODO: test validations
    }
    /**
     * Remove TOTP generator from a user
     *
     * Remove the configured TOTP generator of a user. As only one TOTP generator per user is allowed, the user will not have TOTP as a second factor afterward.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeTOTPTest() throws ApiException {
        String userId = null;
        V2RemoveTOTPResponse response = api.removeTOTP(userId);

        // TODO: test validations
    }
    /**
     * Remove u2f token from a user
     *
     * Remove u2f token from a user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeU2FTest() throws ApiException {
        String userId = null;
        String u2fId = null;
        V2RemoveU2FResponse response = api.removeU2F(userId, u2fId);

        // TODO: test validations
    }
    /**
     * Resend code to verify user email
     *
     * Resend code to verify user email.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resendEmailCodeTest() throws ApiException {
        String userId = null;
        UserServiceResendEmailCodeBody body = null;
        V2ResendEmailCodeResponse response = api.resendEmailCode(userId, body);

        // TODO: test validations
    }
    /**
     * Resend an invite code for a user
     *
     * Resend an invite code for a user to initialize their first authentication method (password, passkeys, IdP) depending on the organization&#39;s available methods. A resend is only possible if a code has been created previously and sent to the user. If there is no code or it was directly returned, an error will be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resendInviteCodeTest() throws ApiException {
        String userId = null;
        V2ResendInviteCodeResponse response = api.resendInviteCode(userId);

        // TODO: test validations
    }
    /**
     * Resend code to verify user phone
     *
     * Resend code to verify user phone.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resendPhoneCodeTest() throws ApiException {
        String userId = null;
        UserServiceResendPhoneCodeBody body = null;
        V2ResendPhoneCodeResponse response = api.resendPhoneCode(userId, body);

        // TODO: test validations
    }
    /**
     * Retrieve the information returned by the identity provider
     *
     * Retrieve the information returned by the identity provider for registration or updating an existing user with new information..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveIdentityProviderIntentTest() throws ApiException {
        String idpIntentId = null;
        UserServiceRetrieveIdentityProviderIntentBody body = null;
        V2RetrieveIdentityProviderIntentResponse response = api.retrieveIdentityProviderIntent(idpIntentId, body);

        // TODO: test validations
    }
    /**
     * Send code to verify user email
     *
     * Send code to verify user email.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendEmailCodeTest() throws ApiException {
        String userId = null;
        UserServiceSendEmailCodeBody body = null;
        V2SendEmailCodeResponse response = api.sendEmailCode(userId, body);

        // TODO: test validations
    }
    /**
     * Change the user email
     *
     * Change the email address of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by email..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setEmailTest() throws ApiException {
        String userId = null;
        UserServiceSetEmailBody body = null;
        V2SetEmailResponse response = api.setEmail(userId, body);

        // TODO: test validations
    }
    /**
     * Change password
     *
     * Change the password of a user with either a verification code or the current password..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPasswordTest() throws ApiException {
        String userId = null;
        V2UserServiceSetPasswordBody body = null;
        V2SetPasswordResponse response = api.setPassword(userId, body);

        // TODO: test validations
    }
    /**
     * Set the user phone
     *
     * Set the phone number of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by sms..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPhoneTest() throws ApiException {
        String userId = null;
        UserServiceSetPhoneBody body = null;
        V2SetPhoneResponse response = api.setPhone(userId, body);

        // TODO: test validations
    }
    /**
     * Start flow with an identity provider
     *
     * Start a flow with an identity provider, for external login, registration or linking..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startIdentityProviderIntentTest() throws ApiException {
        V2StartIdentityProviderIntentRequest body = null;
        V2StartIdentityProviderIntentResponse response = api.startIdentityProviderIntent(body);

        // TODO: test validations
    }
    /**
     * Unlock user
     *
     * The state of the user will be changed to &#39;locked&#39;. The user will not be able to log in anymore. The endpoint returns an error if the user is already in the state &#39;locked&#39;. Use this endpoint if the user should not be able to log in temporarily because of an event that happened (wrong password, etc.)..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unlockUserTest() throws ApiException {
        String userId = null;
        V2UnlockUserResponse response = api.unlockUser(userId);

        // TODO: test validations
    }
    /**
     * Update User
     *
     * Update all information from a user..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateHumanUserTest() throws ApiException {
        String userId = null;
        UserServiceUpdateHumanUserBody body = null;
        V2UpdateHumanUserResponse response = api.updateHumanUser(userId, body);

        // TODO: test validations
    }
    /**
     * Verify the email
     *
     * Verify the email with the generated code.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyEmailTest() throws ApiException {
        String userId = null;
        UserServiceVerifyEmailBody body = null;
        V2VerifyEmailResponse response = api.verifyEmail(userId, body);

        // TODO: test validations
    }
    /**
     * Verify an invite code for a user
     *
     * Verify the invite code of a user previously issued. This will set their email to a verified state and allow the user to set up their first authentication method (password, passkeys, IdP) depending on the organization&#39;s available methods.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyInviteCodeTest() throws ApiException {
        String userId = null;
        UserServiceVerifyInviteCodeBody body = null;
        V2VerifyInviteCodeResponse response = api.verifyInviteCode(userId, body);

        // TODO: test validations
    }
    /**
     * Verify a passkey for a user
     *
     * Verify the passkey registration with the public key credential..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyPasskeyRegistrationTest() throws ApiException {
        String userId = null;
        String passkeyId = null;
        UserServiceVerifyPasskeyRegistrationBody body = null;
        V2VerifyPasskeyRegistrationResponse response = api.verifyPasskeyRegistration(userId, passkeyId, body);

        // TODO: test validations
    }
    /**
     * Verify the phone
     *
     * Verify the phone with the generated code..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyPhoneTest() throws ApiException {
        String userId = null;
        UserServiceVerifyPhoneBody body = null;
        V2VerifyPhoneResponse response = api.verifyPhone(userId, body);

        // TODO: test validations
    }
    /**
     * Verify a TOTP generator for a user
     *
     * Verify the TOTP registration with a generated code..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyTOTPRegistrationTest() throws ApiException {
        String userId = null;
        UserServiceVerifyTOTPRegistrationBody body = null;
        V2VerifyTOTPRegistrationResponse response = api.verifyTOTPRegistration(userId, body);

        // TODO: test validations
    }
    /**
     * Verify a u2f token for a user
     *
     * Verify the u2f token registration with the public key credential..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyU2FRegistrationTest() throws ApiException {
        String userId = null;
        String u2fId = null;
        UserServiceVerifyU2FRegistrationBody body = null;
        V2VerifyU2FRegistrationResponse response = api.verifyU2FRegistration(userId, u2fId, body);

        // TODO: test validations
    }
}
